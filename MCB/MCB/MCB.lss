
MCB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000146e  00001502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800130  00800130  00001532  2**0
                  ALLOC
  3 .stab         000021e4  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e4e  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000478  00000000  00000000  00004566  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c6c  00000000  00000000  000049de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007f50  00000000  00000000  0000564a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001fc9  00000000  00000000  0000d59a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006060  00000000  00000000  0000f563  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006b0  00000000  00000000  000155c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003247  00000000  00000000  00015c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000360d  00000000  00000000  00018ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000580  00000000  00000000  0001c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c2       	rjmp	.+1178   	; 0x4c4 <__vector_10>
      2a:	00 00       	nop
      2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	b4 c0       	rjmp	.+360    	; 0x1ae <__vector_17>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     110:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011a <ProductString>:
     11a:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     12a:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	ee e6       	ldi	r30, 0x6E	; 110
     14c:	f4 e1       	ldi	r31, 0x14	; 20
     14e:	02 c0       	rjmp	.+4      	; 0x154 <.do_copy_data_start>

00000150 <.do_copy_data_loop>:
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0

00000154 <.do_copy_data_start>:
     154:	a0 33       	cpi	r26, 0x30	; 48
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <.do_copy_data_loop>

0000015a <__do_clear_bss>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e3       	ldi	r26, 0x30	; 48
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a3 35       	cpi	r26, 0x53	; 83
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	72 d0       	rcall	.+228    	; 0x250 <main>
     16c:	0c 94 35 0a 	jmp	0x146a	; 0x146a <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <EVENT_USB_Device_Disconnect>:

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change. */

void EVENT_USB_Device_Disconnect(void)
{
}
     172:	08 95       	ret

00000174 <initRTC>:


void initRTC()
{

	TCCR1B |= _BV(WGM12); //set WGM12, will make OCR1A TOP for timer1	
     174:	e1 e8       	ldi	r30, 0x81	; 129
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	88 60       	ori	r24, 0x08	; 8
     17c:	80 83       	st	Z, r24
	OCR1A = MHZ*500;//half a ms 
     17e:	80 e4       	ldi	r24, 0x40	; 64
     180:	9f e1       	ldi	r25, 0x1F	; 31
     182:	90 93 89 00 	sts	0x0089, r25
     186:	80 93 88 00 	sts	0x0088, r24
	
	TCCR1B |= _BV(CS10); //clock source no prescaling
     18a:	80 81       	ld	r24, Z
     18c:	81 60       	ori	r24, 0x01	; 1
     18e:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);//output compare match interrupt enabled
     190:	ef e6       	ldi	r30, 0x6F	; 111
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	82 60       	ori	r24, 0x02	; 2
     198:	80 83       	st	Z, r24
	
	sei();
     19a:	78 94       	sei
}
     19c:	08 95       	ret

0000019e <millis>:
	halfMillis++; 
}


int millis()
{
     19e:	20 91 30 01 	lds	r18, 0x0130
     1a2:	30 91 31 01 	lds	r19, 0x0131
     1a6:	36 95       	lsr	r19
     1a8:	27 95       	ror	r18
	return halfMillis >> 1;
}
     1aa:	c9 01       	movw	r24, r18
     1ac:	08 95       	ret

000001ae <__vector_17>:
	
	sei();
}

ISR(TIMER1_COMPA_vect)
{
     1ae:	1f 92       	push	r1
     1b0:	0f 92       	push	r0
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	0f 92       	push	r0
     1b6:	11 24       	eor	r1, r1
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	2f 93       	push	r18
     1be:	3f 93       	push	r19
     1c0:	4f 93       	push	r20
     1c2:	5f 93       	push	r21
     1c4:	6f 93       	push	r22
     1c6:	7f 93       	push	r23
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	bf 93       	push	r27
     1d0:	ef 93       	push	r30
     1d2:	ff 93       	push	r31
	CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     1d4:	08 e1       	ldi	r16, 0x18	; 24
     1d6:	11 e0       	ldi	r17, 0x01	; 1
     1d8:	c8 01       	movw	r24, r16
     1da:	85 d4       	rcall	.+2314   	; 0xae6 <CDC_Device_ReceiveByte>
        CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     1dc:	c8 01       	movw	r24, r16
     1de:	05 d5       	rcall	.+2570   	; 0xbea <CDC_Device_USBTask>
        USB_USBTask();
     1e0:	6f d4       	rcall	.+2270   	; 0xac0 <USB_USBTask>

	halfMillis++; 
     1e2:	80 91 30 01 	lds	r24, 0x0130
     1e6:	90 91 31 01 	lds	r25, 0x0131
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 31 01 	sts	0x0131, r25
     1f0:	80 93 30 01 	sts	0x0130, r24
}
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	bf 91       	pop	r27
     1fa:	af 91       	pop	r26
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	7f 91       	pop	r23
     202:	6f 91       	pop	r22
     204:	5f 91       	pop	r21
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     21a:	88 e1       	ldi	r24, 0x18	; 24
     21c:	91 e0       	ldi	r25, 0x01	; 1
}
     21e:	92 c5       	rjmp	.+2852   	; 0xd44 <CDC_Device_ProcessControlRequest>

00000220 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     220:	88 e1       	ldi	r24, 0x18	; 24
     222:	91 e0       	ldi	r25, 0x01	; 1
}
     224:	3f c5       	rjmp	.+2686   	; 0xca4 <CDC_Device_ConfigureEndpoints>

00000226 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     226:	84 b7       	in	r24, 0x34	; 52
     228:	87 7f       	andi	r24, 0xF7	; 247
     22a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     22c:	88 e1       	ldi	r24, 0x18	; 24
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	80 93 60 00 	sts	0x0060, r24
     236:	10 92 60 00 	sts	0x0060, r1
     23a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	80 93 61 00 	sts	0x0061, r24
     248:	90 93 61 00 	sts	0x0061, r25
     24c:	0f be       	out	0x3f, r0	; 63
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
}
     24e:	22 c1       	rjmp	.+580    	; 0x494 <USB_Init>

00000250 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
	SetupHardware();
     254:	e8 df       	rcall	.-48     	; 0x226 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateBlockingStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     256:	88 e1       	ldi	r24, 0x18	; 24
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	62 e3       	ldi	r22, 0x32	; 50
     25c:	71 e0       	ldi	r23, 0x01	; 1
     25e:	7e d4       	rcall	.+2300   	; 0xb5c <CDC_Device_CreateBlockingStream>

	char input[20];	

	sei();
     260:	78 94       	sei

	stdout = &USBSerialStream;
     262:	82 e3       	ldi	r24, 0x32	; 50
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	90 93 50 01 	sts	0x0150, r25
     26a:	80 93 4f 01 	sts	0x014F, r24
	stdin = &USBSerialStream;
     26e:	90 93 4e 01 	sts	0x014E, r25
     272:	80 93 4d 01 	sts	0x014D, r24
	int i = 0;
	

	puts("initializing timer: ");
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	1d d6       	rcall	.+3130   	; 0xeb6 <puts>

	initRTC();
     27c:	7b df       	rcall	.-266    	; 0x174 <initRTC>
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
//		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);

//		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
//		USB_USBTask();
		printf("%d", millis());
     27e:	c5 e1       	ldi	r28, 0x15	; 21
     280:	d1 e0       	ldi	r29, 0x01	; 1
     282:	8d df       	rcall	.-230    	; 0x19e <millis>
     284:	00 d0       	rcall	.+0      	; 0x286 <main+0x36>
     286:	00 d0       	rcall	.+0      	; 0x288 <main+0x38>
     288:	ed b7       	in	r30, 0x3d	; 61
     28a:	fe b7       	in	r31, 0x3e	; 62
     28c:	d2 83       	std	Z+2, r29	; 0x02
     28e:	c1 83       	std	Z+1, r28	; 0x01
     290:	94 83       	std	Z+4, r25	; 0x04
     292:	83 83       	std	Z+3, r24	; 0x03
     294:	fe d5       	rcall	.+3068   	; 0xe92 <printf>
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	f1 cf       	rjmp	.-30     	; 0x282 <main+0x32>

000002a0 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     2a0:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2a2:	92 30       	cpi	r25, 0x02	; 2
     2a4:	49 f0       	breq	.+18     	; 0x2b8 <CALLBACK_USB_GetDescriptor+0x18>
     2a6:	93 30       	cpi	r25, 0x03	; 3
     2a8:	61 f0       	breq	.+24     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x22>
     2aa:	91 30       	cpi	r25, 0x01	; 1
     2ac:	f9 f4       	brne	.+62     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x4c>
     2ae:	ec ea       	ldi	r30, 0xAC	; 172
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	22 e1       	ldi	r18, 0x12	; 18
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	1e c0       	rjmp	.+60     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x54>
     2b8:	ee eb       	ldi	r30, 0xBE	; 190
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	2e e3       	ldi	r18, 0x3E	; 62
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	19 c0       	rjmp	.+50     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	49 f0       	breq	.+18     	; 0x2d8 <CALLBACK_USB_GetDescriptor+0x38>
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	18 f0       	brcs	.+6      	; 0x2d0 <CALLBACK_USB_GetDescriptor+0x30>
     2ca:	82 30       	cpi	r24, 0x02	; 2
     2cc:	79 f4       	brne	.+30     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x4c>
     2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     2d0:	ec ef       	ldi	r30, 0xFC	; 252
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	84 91       	lpm	r24, Z+
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     2d8:	e0 e0       	ldi	r30, 0x00	; 0
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	84 91       	lpm	r24, Z+
     2de:	03 c0       	rjmp	.+6      	; 0x2e6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     2e0:	ea e1       	ldi	r30, 0x1A	; 26
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	84 91       	lpm	r24, Z+
     2e6:	28 2f       	mov	r18, r24
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x54>
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     2f4:	ed 93       	st	X+, r30
     2f6:	fc 93       	st	X, r31
	return Size;
}
     2f8:	c9 01       	movw	r24, r18
     2fa:	08 95       	ret

000002fc <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     2fc:	38 2f       	mov	r19, r24
     2fe:	28 2f       	mov	r18, r24
     300:	2c c0       	rjmp	.+88     	; 0x35a <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     302:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     306:	23 17       	cp	r18, r19
     308:	21 f4       	brne	.+8      	; 0x312 <Endpoint_ConfigureEndpoint_Prv+0x16>
     30a:	76 2f       	mov	r23, r22
     30c:	94 2f       	mov	r25, r20
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	06 c0       	rjmp	.+12     	; 0x31e <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     312:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     316:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     31a:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     31e:	91 ff       	sbrs	r25, 1
     320:	1b c0       	rjmp	.+54     	; 0x358 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     322:	80 91 eb 00 	lds	r24, 0x00EB
     326:	8e 7f       	andi	r24, 0xFE	; 254
     328:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     32c:	80 91 ed 00 	lds	r24, 0x00ED
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     336:	80 91 eb 00 	lds	r24, 0x00EB
     33a:	81 60       	ori	r24, 0x01	; 1
     33c:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     340:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     344:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     348:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     34c:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     350:	87 fd       	sbrc	r24, 7
     352:	02 c0       	rjmp	.+4      	; 0x358 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     358:	2f 5f       	subi	r18, 0xFF	; 255
     35a:	27 30       	cpi	r18, 0x07	; 7
     35c:	90 f2       	brcs	.-92     	; 0x302 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     35e:	30 93 e9 00 	sts	0x00E9, r19
     362:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     364:	08 95       	ret

00000366 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     366:	80 91 45 01 	lds	r24, 0x0145
     36a:	88 23       	and	r24, r24
     36c:	9c f4       	brge	.+38     	; 0x394 <Endpoint_ClearStatusStage+0x2e>
     36e:	04 c0       	rjmp	.+8      	; 0x378 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     370:	80 91 44 01 	lds	r24, 0x0144
     374:	88 23       	and	r24, r24
     376:	b9 f0       	breq	.+46     	; 0x3a6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     378:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     37c:	82 ff       	sbrs	r24, 2
     37e:	f8 cf       	rjmp	.-16     	; 0x370 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     380:	80 91 e8 00 	lds	r24, 0x00E8
     384:	8b 77       	andi	r24, 0x7B	; 123
     386:	80 93 e8 00 	sts	0x00E8, r24
     38a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     38c:	80 91 44 01 	lds	r24, 0x0144
     390:	88 23       	and	r24, r24
     392:	49 f0       	breq	.+18     	; 0x3a6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     394:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     398:	80 ff       	sbrs	r24, 0
     39a:	f8 cf       	rjmp	.-16     	; 0x38c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     39c:	80 91 e8 00 	lds	r24, 0x00E8
     3a0:	8e 77       	andi	r24, 0x7E	; 126
     3a2:	80 93 e8 00 	sts	0x00E8, r24
     3a6:	08 95       	ret

000003a8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     3a8:	40 91 e4 00 	lds	r20, 0x00E4
     3ac:	50 91 e5 00 	lds	r21, 0x00E5
     3b0:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     3b2:	80 91 ec 00 	lds	r24, 0x00EC
     3b6:	80 ff       	sbrs	r24, 0
     3b8:	24 c0       	rjmp	.+72     	; 0x402 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     3ba:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     3be:	80 fd       	sbrc	r24, 0
     3c0:	1e c0       	rjmp	.+60     	; 0x3fe <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     3c2:	80 91 44 01 	lds	r24, 0x0144

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     3c6:	88 23       	and	r24, r24
     3c8:	11 f4       	brne	.+4      	; 0x3ce <Endpoint_WaitUntilReady+0x26>
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     3ce:	85 30       	cpi	r24, 0x05	; 5
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <Endpoint_WaitUntilReady+0x2e>
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3d6:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     3da:	85 ff       	sbrs	r24, 5
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <Endpoint_WaitUntilReady+0x3a>
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	08 95       	ret
     3e2:	80 91 e4 00 	lds	r24, 0x00E4
     3e6:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     3ea:	84 17       	cp	r24, r20
     3ec:	95 07       	cpc	r25, r21
     3ee:	09 f3       	breq	.-62     	; 0x3b2 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     3f0:	22 23       	and	r18, r18
     3f2:	11 f4       	brne	.+4      	; 0x3f8 <Endpoint_WaitUntilReady+0x50>
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	08 95       	ret
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	ac 01       	movw	r20, r24
     3fc:	da cf       	rjmp	.-76     	; 0x3b2 <Endpoint_WaitUntilReady+0xa>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     400:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     402:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     406:	82 ff       	sbrs	r24, 2
     408:	dc cf       	rjmp	.-72     	; 0x3c2 <Endpoint_WaitUntilReady+0x1a>
     40a:	f9 cf       	rjmp	.-14     	; 0x3fe <Endpoint_WaitUntilReady+0x56>

0000040c <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     414:	4a d0       	rcall	.+148    	; 0x4aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     416:	51 d0       	rcall	.+162    	; 0x4ba <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     418:	08 ed       	ldi	r16, 0xD8	; 216
     41a:	10 e0       	ldi	r17, 0x00	; 0
     41c:	f8 01       	movw	r30, r16
     41e:	80 81       	ld	r24, Z
     420:	8f 77       	andi	r24, 0x7F	; 127
     422:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     424:	80 81       	ld	r24, Z
     426:	80 68       	ori	r24, 0x80	; 128
     428:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     42a:	80 81       	ld	r24, Z
     42c:	8f 7d       	andi	r24, 0xDF	; 223
     42e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     430:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     432:	10 92 44 01 	sts	0x0144, r1
	USB_Device_ConfigurationNumber  = 0;
     436:	10 92 40 01 	sts	0x0140, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     43a:	10 92 42 01 	sts	0x0142, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     43e:	10 92 41 01 	sts	0x0141, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     442:	80 ee       	ldi	r24, 0xE0	; 224
     444:	e8 2e       	mov	r14, r24
     446:	f1 2c       	mov	r15, r1
     448:	f7 01       	movw	r30, r14
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     450:	f8 01       	movw	r30, r16
     452:	80 81       	ld	r24, Z
     454:	81 60       	ori	r24, 0x01	; 1
     456:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	42 e0       	ldi	r20, 0x02	; 2
     45e:	4e df       	rcall	.-356    	; 0x2fc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     460:	e1 ee       	ldi	r30, 0xE1	; 225
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	8e 7f       	andi	r24, 0xFE	; 254
     468:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     46a:	e2 ee       	ldi	r30, 0xE2	; 226
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	81 60       	ori	r24, 0x01	; 1
     472:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     474:	80 81       	ld	r24, Z
     476:	88 60       	ori	r24, 0x08	; 8
     478:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     47a:	f7 01       	movw	r30, r14
     47c:	80 81       	ld	r24, Z
     47e:	8e 7f       	andi	r24, 0xFE	; 254
     480:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     482:	f8 01       	movw	r30, r16
     484:	80 81       	ld	r24, Z
     486:	80 61       	ori	r24, 0x10	; 16
     488:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	08 95       	ret

00000494 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     494:	e7 ed       	ldi	r30, 0xD7	; 215
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	81 60       	ori	r24, 0x01	; 1
     49c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 43 01 	sts	0x0143, r24

	USB_ResetInterface();
}
     4a8:	b1 cf       	rjmp	.-158    	; 0x40c <USB_ResetInterface>

000004aa <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     4aa:	e8 ed       	ldi	r30, 0xD8	; 216
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	8e 7f       	andi	r24, 0xFE	; 254
     4b2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     4b4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     4b8:	08 95       	ret

000004ba <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     4ba:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     4be:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     4c2:	08 95       	ret

000004c4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	af 93       	push	r26
     4e0:	bf 93       	push	r27
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     4e6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     4ea:	82 ff       	sbrs	r24, 2
     4ec:	0a c0       	rjmp	.+20     	; 0x502 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     4ee:	80 91 e2 00 	lds	r24, 0x00E2
     4f2:	82 ff       	sbrs	r24, 2
     4f4:	06 c0       	rjmp	.+12     	; 0x502 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     4f6:	80 91 e1 00 	lds	r24, 0x00E1
     4fa:	8b 7f       	andi	r24, 0xFB	; 251
     4fc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     500:	de d2       	rcall	.+1468   	; 0xabe <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     502:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     506:	80 ff       	sbrs	r24, 0
     508:	1d c0       	rjmp	.+58     	; 0x544 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     50a:	80 91 d8 00 	lds	r24, 0x00D8
     50e:	80 ff       	sbrs	r24, 0
     510:	19 c0       	rjmp	.+50     	; 0x544 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     512:	80 91 da 00 	lds	r24, 0x00DA
     516:	8e 7f       	andi	r24, 0xFE	; 254
     518:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     51c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     520:	80 ff       	sbrs	r24, 0
     522:	0c c0       	rjmp	.+24     	; 0x53c <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     524:	80 e1       	ldi	r24, 0x10	; 16
     526:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     528:	82 e1       	ldi	r24, 0x12	; 18
     52a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     52c:	09 b4       	in	r0, 0x29	; 41
     52e:	00 fe       	sbrs	r0, 0
     530:	fd cf       	rjmp	.-6      	; 0x52c <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 44 01 	sts	0x0144, r24
			EVENT_USB_Device_Connect();
     538:	c2 d2       	rcall	.+1412   	; 0xabe <USB_Event_Stub>
     53a:	04 c0       	rjmp	.+8      	; 0x544 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     53c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     53e:	10 92 44 01 	sts	0x0144, r1
			EVENT_USB_Device_Disconnect();
     542:	17 de       	rcall	.-978    	; 0x172 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     544:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     548:	80 ff       	sbrs	r24, 0
     54a:	18 c0       	rjmp	.+48     	; 0x57c <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     54c:	80 91 e2 00 	lds	r24, 0x00E2
     550:	80 ff       	sbrs	r24, 0
     552:	14 c0       	rjmp	.+40     	; 0x57c <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     554:	80 91 e2 00 	lds	r24, 0x00E2
     558:	8e 7f       	andi	r24, 0xFE	; 254
     55a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     55e:	80 91 e2 00 	lds	r24, 0x00E2
     562:	80 61       	ori	r24, 0x10	; 16
     564:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     568:	80 91 d8 00 	lds	r24, 0x00D8
     56c:	80 62       	ori	r24, 0x20	; 32
     56e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     572:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	80 93 44 01 	sts	0x0144, r24
		EVENT_USB_Device_Suspend();
     57a:	a1 d2       	rcall	.+1346   	; 0xabe <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     57c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     580:	84 ff       	sbrs	r24, 4
     582:	2d c0       	rjmp	.+90     	; 0x5de <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     584:	80 91 e2 00 	lds	r24, 0x00E2
     588:	84 ff       	sbrs	r24, 4
     58a:	29 c0       	rjmp	.+82     	; 0x5de <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     58c:	80 e1       	ldi	r24, 0x10	; 16
     58e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     590:	82 e1       	ldi	r24, 0x12	; 18
     592:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     594:	09 b4       	in	r0, 0x29	; 41
     596:	00 fe       	sbrs	r0, 0
     598:	fd cf       	rjmp	.-6      	; 0x594 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     59a:	80 91 d8 00 	lds	r24, 0x00D8
     59e:	8f 7d       	andi	r24, 0xDF	; 223
     5a0:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     5a4:	80 91 e1 00 	lds	r24, 0x00E1
     5a8:	8f 7e       	andi	r24, 0xEF	; 239
     5aa:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     5ae:	80 91 e2 00 	lds	r24, 0x00E2
     5b2:	8f 7e       	andi	r24, 0xEF	; 239
     5b4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     5b8:	80 91 e2 00 	lds	r24, 0x00E2
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     5c2:	80 91 40 01 	lds	r24, 0x0140
     5c6:	88 23       	and	r24, r24
     5c8:	31 f4       	brne	.+12     	; 0x5d6 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     5ca:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     5ce:	87 fd       	sbrc	r24, 7
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__vector_10+0x112>
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <__vector_10+0x114>
     5d6:	84 e0       	ldi	r24, 0x04	; 4
     5d8:	80 93 44 01 	sts	0x0144, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     5dc:	70 d2       	rcall	.+1248   	; 0xabe <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     5de:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     5e2:	83 ff       	sbrs	r24, 3
     5e4:	22 c0       	rjmp	.+68     	; 0x62a <__vector_10+0x166>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     5e6:	80 91 e2 00 	lds	r24, 0x00E2
     5ea:	83 ff       	sbrs	r24, 3
     5ec:	1e c0       	rjmp	.+60     	; 0x62a <__vector_10+0x166>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     5ee:	80 91 e1 00 	lds	r24, 0x00E1
     5f2:	87 7f       	andi	r24, 0xF7	; 247
     5f4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	80 93 44 01 	sts	0x0144, r24
		USB_Device_ConfigurationNumber = 0;
     5fe:	10 92 40 01 	sts	0x0140, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     602:	80 91 e1 00 	lds	r24, 0x00E1
     606:	8e 7f       	andi	r24, 0xFE	; 254
     608:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     60c:	80 91 e2 00 	lds	r24, 0x00E2
     610:	8e 7f       	andi	r24, 0xFE	; 254
     612:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     616:	80 91 e2 00 	lds	r24, 0x00E2
     61a:	80 61       	ori	r24, 0x10	; 16
     61c:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	42 e0       	ldi	r20, 0x02	; 2
     626:	6a de       	rcall	.-812    	; 0x2fc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     628:	4a d2       	rcall	.+1172   	; 0xabe <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     62a:	ff 91       	pop	r31
     62c:	ef 91       	pop	r30
     62e:	bf 91       	pop	r27
     630:	af 91       	pop	r26
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	7f 91       	pop	r23
     638:	6f 91       	pop	r22
     63a:	5f 91       	pop	r21
     63c:	4f 91       	pop	r20
     63e:	3f 91       	pop	r19
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <Endpoint_Write_Control_Stream_LE>:
     64c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     64e:	40 91 4b 01 	lds	r20, 0x014B
     652:	50 91 4c 01 	lds	r21, 0x014C
     656:	46 17       	cp	r20, r22
     658:	57 07       	cpc	r21, r23
     65a:	18 f4       	brcc	.+6      	; 0x662 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     65c:	f9 01       	movw	r30, r18
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	45 c0       	rjmp	.+138    	; 0x6ec <Endpoint_Write_Control_Stream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     662:	61 15       	cp	r22, r1
     664:	71 05       	cpc	r23, r1
     666:	11 f0       	breq	.+4      	; 0x66c <Endpoint_Write_Control_Stream_LE+0x20>
     668:	ab 01       	movw	r20, r22
     66a:	f8 cf       	rjmp	.-16     	; 0x65c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     66c:	80 91 e8 00 	lds	r24, 0x00E8
     670:	8e 77       	andi	r24, 0x7E	; 126
     672:	80 93 e8 00 	sts	0x00E8, r24
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	f0 cf       	rjmp	.-32     	; 0x65c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     67c:	80 91 44 01 	lds	r24, 0x0144

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     680:	88 23       	and	r24, r24
     682:	09 f4       	brne	.+2      	; 0x686 <Endpoint_Write_Control_Stream_LE+0x3a>
     684:	45 c0       	rjmp	.+138    	; 0x710 <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     686:	85 30       	cpi	r24, 0x05	; 5
     688:	09 f4       	brne	.+2      	; 0x68c <Endpoint_Write_Control_Stream_LE+0x40>
     68a:	44 c0       	rjmp	.+136    	; 0x714 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     68c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     690:	83 ff       	sbrs	r24, 3
     692:	02 c0       	rjmp	.+4      	; 0x698 <Endpoint_Write_Control_Stream_LE+0x4c>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     698:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     69c:	82 fd       	sbrc	r24, 2
     69e:	32 c0       	rjmp	.+100    	; 0x704 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6a0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     6a4:	80 ff       	sbrs	r24, 0
     6a6:	22 c0       	rjmp	.+68     	; 0x6ec <Endpoint_Write_Control_Stream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     6a8:	80 91 f3 00 	lds	r24, 0x00F3
     6ac:	90 91 f2 00 	lds	r25, 0x00F2
     6b0:	78 2f       	mov	r23, r24
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	29 2f       	mov	r18, r25
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	26 2b       	or	r18, r22
     6ba:	37 2b       	or	r19, r23
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <Endpoint_Write_Control_Stream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6be:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6c0:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     6c4:	41 50       	subi	r20, 0x01	; 1
     6c6:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6cc:	41 15       	cp	r20, r1
     6ce:	51 05       	cpc	r21, r1
     6d0:	19 f0       	breq	.+6      	; 0x6d8 <Endpoint_Write_Control_Stream_LE+0x8c>
     6d2:	28 30       	cpi	r18, 0x08	; 8
     6d4:	31 05       	cpc	r19, r1
     6d6:	98 f3       	brcs	.-26     	; 0x6be <Endpoint_Write_Control_Stream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	28 30       	cpi	r18, 0x08	; 8
     6dc:	31 05       	cpc	r19, r1
     6de:	09 f4       	brne	.+2      	; 0x6e2 <Endpoint_Write_Control_Stream_LE+0x96>
     6e0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6e2:	80 91 e8 00 	lds	r24, 0x00E8
     6e6:	8e 77       	andi	r24, 0x7E	; 126
     6e8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6ec:	41 15       	cp	r20, r1
     6ee:	51 05       	cpc	r21, r1
     6f0:	29 f6       	brne	.-118    	; 0x67c <Endpoint_Write_Control_Stream_LE+0x30>
     6f2:	99 23       	and	r25, r25
     6f4:	19 f6       	brne	.-122    	; 0x67c <Endpoint_Write_Control_Stream_LE+0x30>
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6f8:	80 91 44 01 	lds	r24, 0x0144

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6fc:	88 23       	and	r24, r24
     6fe:	41 f0       	breq	.+16     	; 0x710 <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     700:	85 30       	cpi	r24, 0x05	; 5
     702:	41 f0       	breq	.+16     	; 0x714 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     704:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     708:	82 ff       	sbrs	r24, 2
     70a:	f6 cf       	rjmp	.-20     	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0xac>
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	08 95       	ret
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	08 95       	ret
     714:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     716:	08 95       	ret

00000718 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     718:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     71a:	40 91 4b 01 	lds	r20, 0x014B
     71e:	50 91 4c 01 	lds	r21, 0x014C
     722:	46 17       	cp	r20, r22
     724:	57 07       	cpc	r21, r23
     726:	18 f4       	brcc	.+6      	; 0x72e <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     728:	f9 01       	movw	r30, r18
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <Endpoint_Write_Control_PStream_LE+0xa2>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     72e:	61 15       	cp	r22, r1
     730:	71 05       	cpc	r23, r1
     732:	11 f0       	breq	.+4      	; 0x738 <Endpoint_Write_Control_PStream_LE+0x20>
     734:	ab 01       	movw	r20, r22
     736:	f8 cf       	rjmp	.-16     	; 0x728 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     738:	80 91 e8 00 	lds	r24, 0x00E8
     73c:	8e 77       	andi	r24, 0x7E	; 126
     73e:	80 93 e8 00 	sts	0x00E8, r24
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	f0 cf       	rjmp	.-32     	; 0x728 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     748:	80 91 44 01 	lds	r24, 0x0144

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     74c:	88 23       	and	r24, r24
     74e:	09 f4       	brne	.+2      	; 0x752 <Endpoint_Write_Control_PStream_LE+0x3a>
     750:	47 c0       	rjmp	.+142    	; 0x7e0 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     752:	85 30       	cpi	r24, 0x05	; 5
     754:	09 f4       	brne	.+2      	; 0x758 <Endpoint_Write_Control_PStream_LE+0x40>
     756:	46 c0       	rjmp	.+140    	; 0x7e4 <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     758:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     75c:	83 ff       	sbrs	r24, 3
     75e:	02 c0       	rjmp	.+4      	; 0x764 <Endpoint_Write_Control_PStream_LE+0x4c>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     764:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     768:	82 fd       	sbrc	r24, 2
     76a:	34 c0       	rjmp	.+104    	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     76c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     770:	80 ff       	sbrs	r24, 0
     772:	23 c0       	rjmp	.+70     	; 0x7ba <Endpoint_Write_Control_PStream_LE+0xa2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     774:	80 91 f3 00 	lds	r24, 0x00F3
     778:	90 91 f2 00 	lds	r25, 0x00F2
     77c:	78 2f       	mov	r23, r24
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	29 2f       	mov	r18, r25
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	26 2b       	or	r18, r22
     786:	37 2b       	or	r19, r23
     788:	08 c0       	rjmp	.+16     	; 0x79a <Endpoint_Write_Control_PStream_LE+0x82>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     78a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     78c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     790:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     792:	41 50       	subi	r20, 0x01	; 1
     794:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     796:	2f 5f       	subi	r18, 0xFF	; 255
     798:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     79a:	41 15       	cp	r20, r1
     79c:	51 05       	cpc	r21, r1
     79e:	19 f0       	breq	.+6      	; 0x7a6 <Endpoint_Write_Control_PStream_LE+0x8e>
     7a0:	28 30       	cpi	r18, 0x08	; 8
     7a2:	31 05       	cpc	r19, r1
     7a4:	90 f3       	brcs	.-28     	; 0x78a <Endpoint_Write_Control_PStream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	28 30       	cpi	r18, 0x08	; 8
     7aa:	31 05       	cpc	r19, r1
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <Endpoint_Write_Control_PStream_LE+0x98>
     7ae:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7b0:	80 91 e8 00 	lds	r24, 0x00E8
     7b4:	8e 77       	andi	r24, 0x7E	; 126
     7b6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7ba:	41 15       	cp	r20, r1
     7bc:	51 05       	cpc	r21, r1
     7be:	21 f6       	brne	.-120    	; 0x748 <Endpoint_Write_Control_PStream_LE+0x30>
     7c0:	99 23       	and	r25, r25
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <Endpoint_Write_Control_PStream_LE+0xae>
     7c4:	c1 cf       	rjmp	.-126    	; 0x748 <Endpoint_Write_Control_PStream_LE+0x30>
     7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7c8:	80 91 44 01 	lds	r24, 0x0144

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7cc:	88 23       	and	r24, r24
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7d0:	85 30       	cpi	r24, 0x05	; 5
     7d2:	41 f0       	breq	.+16     	; 0x7e4 <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7d4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     7d8:	82 ff       	sbrs	r24, 2
     7da:	f6 cf       	rjmp	.-20     	; 0x7c8 <Endpoint_Write_Control_PStream_LE+0xb0>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	08 95       	ret
     7e4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     7e6:	08 95       	ret

000007e8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	df 93       	push	r29
     7ee:	cf 93       	push	r28
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	ac 97       	sbiw	r28, 0x2c	; 44
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	e5 e4       	ldi	r30, 0x45	; 69
     802:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     804:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     808:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	ed 34       	cpi	r30, 0x4D	; 77
     80e:	f2 07       	cpc	r31, r18
     810:	c9 f7       	brne	.-14     	; 0x804 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     812:	03 dd       	rcall	.-1530   	; 0x21a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     814:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     818:	83 ff       	sbrs	r24, 3
     81a:	38 c1       	rjmp	.+624    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     81c:	80 91 45 01 	lds	r24, 0x0145

		switch (USB_ControlRequest.bRequest)
     820:	30 91 46 01 	lds	r19, 0x0146
     824:	35 30       	cpi	r19, 0x05	; 5
     826:	09 f4       	brne	.+2      	; 0x82a <USB_Device_ProcessControlRequest+0x42>
     828:	87 c0       	rjmp	.+270    	; 0x938 <USB_Device_ProcessControlRequest+0x150>
     82a:	36 30       	cpi	r19, 0x06	; 6
     82c:	40 f4       	brcc	.+16     	; 0x83e <USB_Device_ProcessControlRequest+0x56>
     82e:	31 30       	cpi	r19, 0x01	; 1
     830:	c9 f1       	breq	.+114    	; 0x8a4 <USB_Device_ProcessControlRequest+0xbc>
     832:	31 30       	cpi	r19, 0x01	; 1
     834:	70 f0       	brcs	.+28     	; 0x852 <USB_Device_ProcessControlRequest+0x6a>
     836:	33 30       	cpi	r19, 0x03	; 3
     838:	09 f0       	breq	.+2      	; 0x83c <USB_Device_ProcessControlRequest+0x54>
     83a:	28 c1       	rjmp	.+592    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
     83c:	33 c0       	rjmp	.+102    	; 0x8a4 <USB_Device_ProcessControlRequest+0xbc>
     83e:	38 30       	cpi	r19, 0x08	; 8
     840:	09 f4       	brne	.+2      	; 0x844 <USB_Device_ProcessControlRequest+0x5c>
     842:	f6 c0       	rjmp	.+492    	; 0xa30 <USB_Device_ProcessControlRequest+0x248>
     844:	39 30       	cpi	r19, 0x09	; 9
     846:	09 f4       	brne	.+2      	; 0x84a <USB_Device_ProcessControlRequest+0x62>
     848:	05 c1       	rjmp	.+522    	; 0xa54 <USB_Device_ProcessControlRequest+0x26c>
     84a:	36 30       	cpi	r19, 0x06	; 6
     84c:	09 f0       	breq	.+2      	; 0x850 <USB_Device_ProcessControlRequest+0x68>
     84e:	1e c1       	rjmp	.+572    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
     850:	97 c0       	rjmp	.+302    	; 0x980 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     852:	80 38       	cpi	r24, 0x80	; 128
     854:	21 f0       	breq	.+8      	; 0x85e <USB_Device_ProcessControlRequest+0x76>
     856:	82 38       	cpi	r24, 0x82	; 130
     858:	09 f0       	breq	.+2      	; 0x85c <USB_Device_ProcessControlRequest+0x74>
     85a:	18 c1       	rjmp	.+560    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
     85c:	08 c0       	rjmp	.+16     	; 0x86e <USB_Device_ProcessControlRequest+0x86>
     85e:	90 91 41 01 	lds	r25, 0x0141
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     862:	80 91 42 01 	lds	r24, 0x0142
     866:	88 23       	and	r24, r24
     868:	99 f0       	breq	.+38     	; 0x890 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     86a:	92 60       	ori	r25, 0x02	; 2
     86c:	11 c0       	rjmp	.+34     	; 0x890 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     86e:	80 91 49 01 	lds	r24, 0x0149
     872:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     874:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     878:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	25 e0       	ldi	r18, 0x05	; 5
     880:	96 95       	lsr	r25
     882:	87 95       	ror	r24
     884:	2a 95       	dec	r18
     886:	e1 f7       	brne	.-8      	; 0x880 <USB_Device_ProcessControlRequest+0x98>
     888:	98 2f       	mov	r25, r24
     88a:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     88c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     890:	80 91 e8 00 	lds	r24, 0x00E8
     894:	87 7f       	andi	r24, 0xF7	; 247
     896:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     89a:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     89e:	10 92 f1 00 	sts	0x00F1, r1
     8a2:	d1 c0       	rjmp	.+418    	; 0xa46 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     8a4:	88 23       	and	r24, r24
     8a6:	19 f0       	breq	.+6      	; 0x8ae <USB_Device_ProcessControlRequest+0xc6>
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	09 f0       	breq	.+2      	; 0x8ae <USB_Device_ProcessControlRequest+0xc6>
     8ac:	ef c0       	rjmp	.+478    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	8f 71       	andi	r24, 0x1F	; 31
     8b2:	90 70       	andi	r25, 0x00	; 0
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <USB_Device_ProcessControlRequest+0xd8>
     8b8:	02 97       	sbiw	r24, 0x02	; 2
     8ba:	09 f0       	breq	.+2      	; 0x8be <USB_Device_ProcessControlRequest+0xd6>
     8bc:	e7 c0       	rjmp	.+462    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
     8be:	0c c0       	rjmp	.+24     	; 0x8d8 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     8c0:	80 91 47 01 	lds	r24, 0x0147
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <USB_Device_ProcessControlRequest+0xe2>
     8c8:	e1 c0       	rjmp	.+450    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     8ca:	10 92 42 01 	sts	0x0142, r1
     8ce:	33 30       	cpi	r19, 0x03	; 3
     8d0:	69 f5       	brne	.+90     	; 0x92c <USB_Device_ProcessControlRequest+0x144>
     8d2:	80 93 42 01 	sts	0x0142, r24
     8d6:	2a c0       	rjmp	.+84     	; 0x92c <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     8d8:	80 91 47 01 	lds	r24, 0x0147
     8dc:	88 23       	and	r24, r24
     8de:	31 f5       	brne	.+76     	; 0x92c <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     8e0:	20 91 49 01 	lds	r18, 0x0149
     8e4:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     8e6:	09 f4       	brne	.+2      	; 0x8ea <USB_Device_ProcessControlRequest+0x102>
     8e8:	d1 c0       	rjmp	.+418    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8ea:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     8ee:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     8f2:	80 ff       	sbrs	r24, 0
     8f4:	1b c0       	rjmp	.+54     	; 0x92c <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     8f6:	33 30       	cpi	r19, 0x03	; 3
     8f8:	21 f4       	brne	.+8      	; 0x902 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     8fa:	80 91 eb 00 	lds	r24, 0x00EB
     8fe:	80 62       	ori	r24, 0x20	; 32
     900:	13 c0       	rjmp	.+38     	; 0x928 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     902:	80 91 eb 00 	lds	r24, 0x00EB
     906:	80 61       	ori	r24, 0x10	; 16
     908:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	02 c0       	rjmp	.+4      	; 0x916 <USB_Device_ProcessControlRequest+0x12e>
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	2a 95       	dec	r18
     918:	e2 f7       	brpl	.-8      	; 0x912 <USB_Device_ProcessControlRequest+0x12a>
     91a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     91e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     922:	80 91 eb 00 	lds	r24, 0x00EB
     926:	88 60       	ori	r24, 0x08	; 8
     928:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     92c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     930:	80 91 e8 00 	lds	r24, 0x00E8
     934:	87 7f       	andi	r24, 0xF7	; 247
     936:	8a c0       	rjmp	.+276    	; 0xa4c <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     938:	88 23       	and	r24, r24
     93a:	09 f0       	breq	.+2      	; 0x93e <USB_Device_ProcessControlRequest+0x156>
     93c:	a7 c0       	rjmp	.+334    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     93e:	10 91 47 01 	lds	r17, 0x0147
     942:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     944:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     946:	f8 94       	cli
     948:	80 91 e8 00 	lds	r24, 0x00E8
     94c:	87 7f       	andi	r24, 0xF7	; 247
     94e:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     952:	09 dd       	rcall	.-1518   	; 0x366 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     954:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     958:	80 ff       	sbrs	r24, 0
     95a:	fc cf       	rjmp	.-8      	; 0x954 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     95c:	80 91 e3 00 	lds	r24, 0x00E3
     960:	80 78       	andi	r24, 0x80	; 128
     962:	81 2b       	or	r24, r17

				UDADDR = Temp;
     964:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     968:	80 68       	ori	r24, 0x80	; 128
     96a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     96e:	11 23       	and	r17, r17
     970:	11 f4       	brne	.+4      	; 0x976 <USB_Device_ProcessControlRequest+0x18e>
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	01 c0       	rjmp	.+2      	; 0x978 <USB_Device_ProcessControlRequest+0x190>
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	80 93 44 01 	sts	0x0144, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     97c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     97e:	86 c0       	rjmp	.+268    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     980:	80 58       	subi	r24, 0x80	; 128
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	08 f0       	brcs	.+2      	; 0x988 <USB_Device_ProcessControlRequest+0x1a0>
     986:	82 c0       	rjmp	.+260    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     988:	80 91 47 01 	lds	r24, 0x0147
     98c:	90 91 48 01 	lds	r25, 0x0148
     990:	23 e0       	ldi	r18, 0x03	; 3
     992:	8c 3d       	cpi	r24, 0xDC	; 220
     994:	92 07       	cpc	r25, r18
     996:	09 f0       	breq	.+2      	; 0x99a <USB_Device_ProcessControlRequest+0x1b2>
     998:	33 c0       	rjmp	.+102    	; 0xa00 <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     99e:	8a e2       	ldi	r24, 0x2A	; 42
     9a0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     9a2:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     9a4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     9a6:	de 01       	movw	r26, r28
     9a8:	15 96       	adiw	r26, 0x05	; 5
     9aa:	6e e0       	ldi	r22, 0x0E	; 14
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     9b0:	11 e2       	ldi	r17, 0x21	; 33
     9b2:	e6 2f       	mov	r30, r22
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	10 93 57 00 	sts	0x0057, r17
     9ba:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     9bc:	40 ff       	sbrs	r20, 0
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
     9c0:	82 95       	swap	r24
     9c2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     9cc:	8a 30       	cpi	r24, 0x0A	; 10
     9ce:	18 f0       	brcs	.+6      	; 0x9d6 <USB_Device_ProcessControlRequest+0x1ee>
     9d0:	c9 01       	movw	r24, r18
     9d2:	c7 96       	adiw	r24, 0x37	; 55
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <USB_Device_ProcessControlRequest+0x1f2>
     9d6:	c9 01       	movw	r24, r18
     9d8:	c0 96       	adiw	r24, 0x30	; 48
     9da:	8d 93       	st	X+, r24
     9dc:	9d 93       	st	X+, r25
     9de:	4f 5f       	subi	r20, 0xFF	; 255
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     9e2:	44 31       	cpi	r20, 0x14	; 20
     9e4:	51 05       	cpc	r21, r1
     9e6:	29 f7       	brne	.-54     	; 0x9b2 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     9e8:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9ea:	80 91 e8 00 	lds	r24, 0x00E8
     9ee:	87 7f       	andi	r24, 0xF7	; 247
     9f0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     9f4:	ce 01       	movw	r24, r28
     9f6:	03 96       	adiw	r24, 0x03	; 3
     9f8:	6a e2       	ldi	r22, 0x2A	; 42
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	27 de       	rcall	.-946    	; 0x64c <Endpoint_Write_Control_Stream_LE>
     9fe:	12 c0       	rjmp	.+36     	; 0xa24 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     a00:	60 91 49 01 	lds	r22, 0x0149
     a04:	ae 01       	movw	r20, r28
     a06:	4f 5f       	subi	r20, 0xFF	; 255
     a08:	5f 4f       	sbci	r21, 0xFF	; 255
     a0a:	4a dc       	rcall	.-1900   	; 0x2a0 <CALLBACK_USB_GetDescriptor>
     a0c:	bc 01       	movw	r22, r24
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	09 f4       	brne	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0x22c>
     a12:	3c c0       	rjmp	.+120    	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
     a14:	80 91 e8 00 	lds	r24, 0x00E8
     a18:	87 7f       	andi	r24, 0xF7	; 247
     a1a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	7a de       	rcall	.-780    	; 0x718 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a24:	80 91 e8 00 	lds	r24, 0x00E8
     a28:	8b 77       	andi	r24, 0x7B	; 123
     a2a:	80 93 e8 00 	sts	0x00E8, r24
     a2e:	2e c0       	rjmp	.+92     	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     a30:	80 38       	cpi	r24, 0x80	; 128
     a32:	61 f5       	brne	.+88     	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a34:	80 91 e8 00 	lds	r24, 0x00E8
     a38:	87 7f       	andi	r24, 0xF7	; 247
     a3a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     a3e:	80 91 40 01 	lds	r24, 0x0140
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a42:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a46:	80 91 e8 00 	lds	r24, 0x00E8
     a4a:	8e 77       	andi	r24, 0x7E	; 126
     a4c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     a50:	8a dc       	rcall	.-1772   	; 0x366 <Endpoint_ClearStatusStage>
     a52:	1c c0       	rjmp	.+56     	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a54:	88 23       	and	r24, r24
     a56:	d1 f4       	brne	.+52     	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     a58:	90 91 47 01 	lds	r25, 0x0147
     a5c:	92 30       	cpi	r25, 0x02	; 2
     a5e:	b0 f4       	brcc	.+44     	; 0xa8c <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a60:	80 91 e8 00 	lds	r24, 0x00E8
     a64:	87 7f       	andi	r24, 0xF7	; 247
     a66:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     a6a:	90 93 40 01 	sts	0x0140, r25

	Endpoint_ClearStatusStage();
     a6e:	7b dc       	rcall	.-1802   	; 0x366 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     a70:	80 91 40 01 	lds	r24, 0x0140
     a74:	88 23       	and	r24, r24
     a76:	31 f4       	brne	.+12     	; 0xa84 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a78:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a7c:	87 fd       	sbrc	r24, 7
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <USB_Device_ProcessControlRequest+0x29c>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x29e>
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	80 93 44 01 	sts	0x0144, r24

	EVENT_USB_Device_ConfigurationChanged();
     a8a:	ca db       	rcall	.-2156   	; 0x220 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a8c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     a90:	83 ff       	sbrs	r24, 3
     a92:	0a c0       	rjmp	.+20     	; 0xaa8 <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a94:	80 91 eb 00 	lds	r24, 0x00EB
     a98:	80 62       	ori	r24, 0x20	; 32
     a9a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a9e:	80 91 e8 00 	lds	r24, 0x00E8
     aa2:	87 7f       	andi	r24, 0xF7	; 247
     aa4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     aa8:	ac 96       	adiw	r28, 0x2c	; 44
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     abe:	08 95       	ret

00000ac0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     ac0:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     ac2:	80 91 44 01 	lds	r24, 0x0144
     ac6:	88 23       	and	r24, r24
     ac8:	61 f0       	breq	.+24     	; 0xae2 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     aca:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ace:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ad2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     ad6:	83 ff       	sbrs	r24, 3
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     ada:	86 de       	rcall	.-756    	; 0x7e8 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     adc:	1f 70       	andi	r17, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ade:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     ae2:	1f 91       	pop	r17
     ae4:	08 95       	ret

00000ae6 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ae6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ae8:	80 91 44 01 	lds	r24, 0x0144
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	91 f5       	brne	.+100    	; 0xb54 <__stack+0x55>
     af0:	81 89       	ldd	r24, Z+17	; 0x11
     af2:	92 89       	ldd	r25, Z+18	; 0x12
     af4:	a3 89       	ldd	r26, Z+19	; 0x13
     af6:	b4 89       	ldd	r27, Z+20	; 0x14
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	a1 05       	cpc	r26, r1
     afc:	b1 05       	cpc	r27, r1
     afe:	51 f1       	breq	.+84     	; 0xb54 <__stack+0x55>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     b00:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b02:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b06:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
     b0a:	82 ff       	sbrs	r24, 2
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <__stack+0x55>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b0e:	40 91 f3 00 	lds	r20, 0x00F3
     b12:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     b16:	94 2f       	mov	r25, r20
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	82 2b       	or	r24, r18
     b1e:	93 2b       	or	r25, r19
     b20:	89 2b       	or	r24, r25
     b22:	19 f4       	brne	.+6      	; 0xb2a <__stack+0x2b>
     b24:	6f ef       	ldi	r22, 0xFF	; 255
     b26:	7f ef       	ldi	r23, 0xFF	; 255
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__stack+0x33>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b2a:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     b2e:	68 2f       	mov	r22, r24
     b30:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b32:	40 91 f3 00 	lds	r20, 0x00F3
     b36:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     b3a:	94 2f       	mov	r25, r20
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	82 2b       	or	r24, r18
     b42:	93 2b       	or	r25, r19
     b44:	89 2b       	or	r24, r25
     b46:	41 f4       	brne	.+16     	; 0xb58 <__stack+0x59>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b48:	80 91 e8 00 	lds	r24, 0x00E8
     b4c:	8b 77       	andi	r24, 0x7B	; 123
     b4e:	80 93 e8 00 	sts	0x00E8, r24
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <__stack+0x59>
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     b58:	cb 01       	movw	r24, r22
     b5a:	08 95       	ret

00000b5c <CDC_Device_CreateBlockingStream>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
     b5c:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
     b5e:	2e e0       	ldi	r18, 0x0E	; 14
     b60:	db 01       	movw	r26, r22
     b62:	1d 92       	st	X+, r1
     b64:	2a 95       	dec	r18
     b66:	e9 f7       	brne	.-6      	; 0xb62 <CDC_Device_CreateBlockingStream+0x6>
     b68:	23 e0       	ldi	r18, 0x03	; 3
     b6a:	23 83       	std	Z+3, r18	; 0x03
     b6c:	23 e4       	ldi	r18, 0x43	; 67
     b6e:	36 e0       	ldi	r19, 0x06	; 6
     b70:	31 87       	std	Z+9, r19	; 0x09
     b72:	20 87       	std	Z+8, r18	; 0x08
     b74:	25 e0       	ldi	r18, 0x05	; 5
     b76:	36 e0       	ldi	r19, 0x06	; 6
     b78:	33 87       	std	Z+11, r19	; 0x0b
     b7a:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     b7c:	95 87       	std	Z+13, r25	; 0x0d
     b7e:	84 87       	std	Z+12, r24	; 0x0c
}
     b80:	08 95       	ret

00000b82 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     b82:	08 95       	ret

00000b84 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     b84:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     b86:	80 91 44 01 	lds	r24, 0x0144
     b8a:	84 30       	cpi	r24, 0x04	; 4
     b8c:	49 f5       	brne	.+82     	; 0xbe0 <CDC_Device_Flush+0x5c>
     b8e:	81 89       	ldd	r24, Z+17	; 0x11
     b90:	92 89       	ldd	r25, Z+18	; 0x12
     b92:	a3 89       	ldd	r26, Z+19	; 0x13
     b94:	b4 89       	ldd	r27, Z+20	; 0x14
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	09 f1       	breq	.+66     	; 0xbe0 <CDC_Device_Flush+0x5c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ba0:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     ba4:	40 91 f3 00 	lds	r20, 0x00F3
     ba8:	20 91 f2 00 	lds	r18, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
     bac:	94 2f       	mov	r25, r20
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	82 2b       	or	r24, r18
     bb4:	93 2b       	or	r25, r19
     bb6:	89 2b       	or	r24, r25
     bb8:	a9 f0       	breq	.+42     	; 0xbe4 <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bba:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bbe:	80 91 e8 00 	lds	r24, 0x00E8
     bc2:	8e 77       	andi	r24, 0x7E	; 126
     bc4:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     bc8:	95 fd       	sbrc	r25, 5
     bca:	0c c0       	rjmp	.+24     	; 0xbe4 <CDC_Device_Flush+0x60>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     bcc:	ed db       	rcall	.-2086   	; 0x3a8 <Endpoint_WaitUntilReady>
     bce:	98 2f       	mov	r25, r24
     bd0:	88 23       	and	r24, r24
     bd2:	49 f4       	brne	.+18     	; 0xbe6 <CDC_Device_Flush+0x62>
     bd4:	80 91 e8 00 	lds	r24, 0x00E8
     bd8:	8e 77       	andi	r24, 0x7E	; 126
     bda:	80 93 e8 00 	sts	0x00E8, r24
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <CDC_Device_Flush+0x62>
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <CDC_Device_Flush+0x62>
     be4:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     be6:	89 2f       	mov	r24, r25
     be8:	08 95       	ret

00000bea <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     bea:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     bec:	80 91 44 01 	lds	r24, 0x0144
     bf0:	84 30       	cpi	r24, 0x04	; 4
     bf2:	51 f4       	brne	.+20     	; 0xc08 <CDC_Device_USBTask+0x1e>
     bf4:	81 89       	ldd	r24, Z+17	; 0x11
     bf6:	92 89       	ldd	r25, Z+18	; 0x12
     bf8:	a3 89       	ldd	r26, Z+19	; 0x13
     bfa:	b4 89       	ldd	r27, Z+20	; 0x14
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	a1 05       	cpc	r26, r1
     c00:	b1 05       	cpc	r27, r1
     c02:	11 f0       	breq	.+4      	; 0xc08 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     c04:	cf 01       	movw	r24, r30
     c06:	be cf       	rjmp	.-132    	; 0xb84 <CDC_Device_Flush>
     c08:	08 95       	ret

00000c0a <CDC_Device_getchar_Blocking>:

	return ReceivedByte;
}

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	0b c0       	rjmp	.+22     	; 0xc28 <CDC_Device_getchar_Blocking+0x1e>
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     c12:	80 91 44 01 	lds	r24, 0x0144
     c16:	88 23       	and	r24, r24
     c18:	19 f4       	brne	.+6      	; 0xc20 <CDC_Device_getchar_Blocking+0x16>
     c1a:	2e ef       	ldi	r18, 0xFE	; 254
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	0a c0       	rjmp	.+20     	; 0xc34 <CDC_Device_getchar_Blocking+0x2a>
		  return _FDEV_EOF;

		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     c20:	8c 85       	ldd	r24, Y+12	; 0x0c
     c22:	9d 85       	ldd	r25, Y+13	; 0x0d
     c24:	e2 df       	rcall	.-60     	; 0xbea <CDC_Device_USBTask>
		USB_USBTask();
     c26:	4c df       	rcall	.-360    	; 0xac0 <USB_USBTask>

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
     c28:	8c 85       	ldd	r24, Y+12	; 0x0c
     c2a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c2c:	5c df       	rcall	.-328    	; 0xae6 <CDC_Device_ReceiveByte>
     c2e:	9c 01       	movw	r18, r24
     c30:	97 fd       	sbrc	r25, 7
     c32:	ef cf       	rjmp	.-34     	; 0xc12 <CDC_Device_getchar_Blocking+0x8>
		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
		USB_USBTask();
	}

	return ReceivedByte;
}
     c34:	c9 01       	movw	r24, r18
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     c3c:	1f 93       	push	r17
     c3e:	fc 01       	movw	r30, r24
     c40:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     c42:	80 91 44 01 	lds	r24, 0x0144
     c46:	84 30       	cpi	r24, 0x04	; 4
     c48:	d9 f4       	brne	.+54     	; 0xc80 <CDC_Device_SendByte+0x44>
     c4a:	81 89       	ldd	r24, Z+17	; 0x11
     c4c:	92 89       	ldd	r25, Z+18	; 0x12
     c4e:	a3 89       	ldd	r26, Z+19	; 0x13
     c50:	b4 89       	ldd	r27, Z+20	; 0x14
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	a1 05       	cpc	r26, r1
     c56:	b1 05       	cpc	r27, r1
     c58:	99 f0       	breq	.+38     	; 0xc80 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     c5a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c5c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c60:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     c64:	85 fd       	sbrc	r24, 5
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c68:	80 91 e8 00 	lds	r24, 0x00E8
     c6c:	8e 77       	andi	r24, 0x7E	; 126
     c6e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     c72:	9a db       	rcall	.-2252   	; 0x3a8 <Endpoint_WaitUntilReady>
     c74:	88 23       	and	r24, r24
     c76:	29 f4       	brne	.+10     	; 0xc82 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c78:	10 93 f1 00 	sts	0x00F1, r17
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     c80:	82 e0       	ldi	r24, 0x02	; 2
}
     c82:	1f 91       	pop	r17
     c84:	08 95       	ret

00000c86 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
     c86:	28 2f       	mov	r18, r24
     c88:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     c8a:	84 85       	ldd	r24, Z+12	; 0x0c
     c8c:	95 85       	ldd	r25, Z+13	; 0x0d
     c8e:	62 2f       	mov	r22, r18
     c90:	d5 df       	rcall	.-86     	; 0xc3c <CDC_Device_SendByte>
     c92:	88 23       	and	r24, r24
     c94:	19 f4       	brne	.+6      	; 0xc9c <CDC_Device_putchar+0x16>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <CDC_Device_putchar+0x1a>
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
}
     ca0:	c9 01       	movw	r24, r18
     ca2:	08 95       	ret

00000ca4 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     cac:	0d 96       	adiw	r24, 0x0d	; 13
     cae:	fc 01       	movw	r30, r24
     cb0:	8b e0       	ldi	r24, 0x0B	; 11
     cb2:	df 01       	movw	r26, r30
     cb4:	1d 92       	st	X+, r1
     cb6:	8a 95       	dec	r24
     cb8:	e9 f7       	brne	.-6      	; 0xcb4 <CDC_Device_ConfigureEndpoints+0x10>
     cba:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	18 17       	cp	r17, r24
     cc0:	29 f4       	brne	.+10     	; 0xccc <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
     cc2:	6a 81       	ldd	r22, Y+2	; 0x02
     cc4:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	52 e0       	ldi	r21, 0x02	; 2
     cca:	10 c0       	rjmp	.+32     	; 0xcec <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	18 17       	cp	r17, r24
     cd0:	31 f4       	brne	.+12     	; 0xcde <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
     cd2:	6e 81       	ldd	r22, Y+6	; 0x06
     cd4:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
     cd6:	88 85       	ldd	r24, Y+8	; 0x08
     cd8:	52 e0       	ldi	r21, 0x02	; 2
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	08 c0       	rjmp	.+16     	; 0xcee <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	18 17       	cp	r17, r24
     ce2:	39 f5       	brne	.+78     	; 0xd32 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
     ce4:	6a 85       	ldd	r22, Y+10	; 0x0a
     ce6:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
     ce8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cea:	53 e0       	ldi	r21, 0x03	; 3
     cec:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
     cee:	88 23       	and	r24, r24
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <CDC_Device_ConfigureEndpoints+0x52>
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <CDC_Device_ConfigureEndpoints+0x54>
     cf6:	44 e0       	ldi	r20, 0x04	; 4
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	88 e0       	ldi	r24, 0x08	; 8
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	03 c0       	rjmp	.+6      	; 0xd06 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     d00:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     d06:	86 17       	cp	r24, r22
     d08:	97 07       	cpc	r25, r23
     d0a:	d0 f3       	brcs	.-12     	; 0xd00 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     d0c:	85 2f       	mov	r24, r21
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	56 e0       	ldi	r21, 0x06	; 6
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	5a 95       	dec	r21
     d18:	e1 f7       	brne	.-8      	; 0xd12 <CDC_Device_ConfigureEndpoints+0x6e>
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	31 11       	cpse	r19, r1
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	68 2b       	or	r22, r24
     d22:	42 60       	ori	r20, 0x02	; 2
     d24:	22 95       	swap	r18
     d26:	20 7f       	andi	r18, 0xF0	; 240
     d28:	42 2b       	or	r20, r18
     d2a:	81 2f       	mov	r24, r17
     d2c:	e7 da       	rcall	.-2610   	; 0x2fc <Endpoint_ConfigureEndpoint_Prv>
     d2e:	88 23       	and	r24, r24
     d30:	29 f0       	breq	.+10     	; 0xd3c <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     d32:	1f 5f       	subi	r17, 0xFF	; 255
     d34:	17 30       	cpi	r17, 0x07	; 7
     d36:	09 f0       	breq	.+2      	; 0xd3a <CDC_Device_ConfigureEndpoints+0x96>
     d38:	c1 cf       	rjmp	.-126    	; 0xcbc <CDC_Device_ConfigureEndpoints+0x18>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	08 95       	ret

00000d44 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d4a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     d4e:	83 ff       	sbrs	r24, 3
     d50:	9d c0       	rjmp	.+314    	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d52:	88 81       	ld	r24, Y
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	20 91 49 01 	lds	r18, 0x0149
     d5a:	30 91 4a 01 	lds	r19, 0x014A
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	09 f0       	breq	.+2      	; 0xd66 <CDC_Device_ProcessControlRequest+0x22>
     d64:	93 c0       	rjmp	.+294    	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
	  return;

	switch (USB_ControlRequest.bRequest)
     d66:	80 91 46 01 	lds	r24, 0x0146
     d6a:	81 32       	cpi	r24, 0x21	; 33
     d6c:	69 f0       	breq	.+26     	; 0xd88 <CDC_Device_ProcessControlRequest+0x44>
     d6e:	82 32       	cpi	r24, 0x22	; 34
     d70:	20 f4       	brcc	.+8      	; 0xd7a <CDC_Device_ProcessControlRequest+0x36>
     d72:	80 32       	cpi	r24, 0x20	; 32
     d74:	09 f0       	breq	.+2      	; 0xd78 <CDC_Device_ProcessControlRequest+0x34>
     d76:	8a c0       	rjmp	.+276    	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
     d78:	3c c0       	rjmp	.+120    	; 0xdf2 <CDC_Device_ProcessControlRequest+0xae>
     d7a:	82 32       	cpi	r24, 0x22	; 34
     d7c:	09 f4       	brne	.+2      	; 0xd80 <CDC_Device_ProcessControlRequest+0x3c>
     d7e:	65 c0       	rjmp	.+202    	; 0xe4a <CDC_Device_ProcessControlRequest+0x106>
     d80:	83 32       	cpi	r24, 0x23	; 35
     d82:	09 f0       	breq	.+2      	; 0xd86 <CDC_Device_ProcessControlRequest+0x42>
     d84:	83 c0       	rjmp	.+262    	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
     d86:	74 c0       	rjmp	.+232    	; 0xe70 <CDC_Device_ProcessControlRequest+0x12c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d88:	80 91 45 01 	lds	r24, 0x0145
     d8c:	81 3a       	cpi	r24, 0xA1	; 161
     d8e:	09 f0       	breq	.+2      	; 0xd92 <CDC_Device_ProcessControlRequest+0x4e>
     d90:	7d c0       	rjmp	.+250    	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d92:	80 91 e8 00 	lds	r24, 0x00E8
     d96:	87 7f       	andi	r24, 0xF7	; 247
     d98:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d9c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     da0:	80 ff       	sbrs	r24, 0
     da2:	fc cf       	rjmp	.-8      	; 0xd9c <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     da4:	89 89       	ldd	r24, Y+17	; 0x11
     da6:	9a 89       	ldd	r25, Y+18	; 0x12
     da8:	ab 89       	ldd	r26, Y+19	; 0x13
     daa:	bc 89       	ldd	r27, Y+20	; 0x14
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     dac:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     db0:	29 2f       	mov	r18, r25
     db2:	3a 2f       	mov	r19, r26
     db4:	4b 2f       	mov	r20, r27
     db6:	55 27       	eor	r21, r21
     db8:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     dbc:	9d 01       	movw	r18, r26
     dbe:	44 27       	eor	r20, r20
     dc0:	55 27       	eor	r21, r21
     dc2:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     dc6:	8b 2f       	mov	r24, r27
     dc8:	99 27       	eor	r25, r25
     dca:	aa 27       	eor	r26, r26
     dcc:	bb 27       	eor	r27, r27
     dce:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     dd2:	8d 89       	ldd	r24, Y+21	; 0x15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dd4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     dd8:	8e 89       	ldd	r24, Y+22	; 0x16
     dda:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     dde:	8f 89       	ldd	r24, Y+23	; 0x17
     de0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de4:	80 91 e8 00 	lds	r24, 0x00E8
     de8:	8e 77       	andi	r24, 0x7E	; 126
     dea:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     dee:	bb da       	rcall	.-2698   	; 0x366 <Endpoint_ClearStatusStage>
     df0:	4d c0       	rjmp	.+154    	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     df2:	80 91 45 01 	lds	r24, 0x0145
     df6:	81 32       	cpi	r24, 0x21	; 33
     df8:	09 f0       	breq	.+2      	; 0xdfc <CDC_Device_ProcessControlRequest+0xb8>
     dfa:	48 c0       	rjmp	.+144    	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dfc:	80 91 e8 00 	lds	r24, 0x00E8
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e06:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()));
     e0a:	82 ff       	sbrs	r24, 2
     e0c:	fc cf       	rjmp	.-8      	; 0xe06 <CDC_Device_ProcessControlRequest+0xc2>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     e0e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     e12:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     e16:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
     e1a:	30 91 f1 00 	lds	r19, 0x00F1

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     e1e:	89 8b       	std	Y+17, r24	; 0x11
     e20:	9a 8b       	std	Y+18, r25	; 0x12
     e22:	2b 8b       	std	Y+19, r18	; 0x13
     e24:	3c 8b       	std	Y+20, r19	; 0x14
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e26:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     e2a:	8d 8b       	std	Y+21, r24	; 0x15
     e2c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     e30:	8e 8b       	std	Y+22, r24	; 0x16
     e32:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     e36:	8f 8b       	std	Y+23, r24	; 0x17
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e38:	80 91 e8 00 	lds	r24, 0x00E8
     e3c:	8b 77       	andi	r24, 0x7B	; 123
     e3e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     e42:	91 da       	rcall	.-2782   	; 0x366 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e44:	ce 01       	movw	r24, r28
     e46:	9d de       	rcall	.-710    	; 0xb82 <CDC_Device_Event_Stub>
     e48:	21 c0       	rjmp	.+66     	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e4a:	80 91 45 01 	lds	r24, 0x0145
     e4e:	81 32       	cpi	r24, 0x21	; 33
     e50:	e9 f4       	brne	.+58     	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e52:	80 91 e8 00 	lds	r24, 0x00E8
     e56:	87 7f       	andi	r24, 0xF7	; 247
     e58:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e5c:	84 da       	rcall	.-2808   	; 0x366 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e5e:	80 91 47 01 	lds	r24, 0x0147
     e62:	90 91 48 01 	lds	r25, 0x0148
     e66:	9e 87       	std	Y+14, r25	; 0x0e
     e68:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e6a:	ce 01       	movw	r24, r28
     e6c:	8a de       	rcall	.-748    	; 0xb82 <CDC_Device_Event_Stub>
     e6e:	0e c0       	rjmp	.+28     	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e70:	80 91 45 01 	lds	r24, 0x0145
     e74:	81 32       	cpi	r24, 0x21	; 33
     e76:	51 f4       	brne	.+20     	; 0xe8c <CDC_Device_ProcessControlRequest+0x148>
     e78:	80 91 e8 00 	lds	r24, 0x00E8
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e82:	71 da       	rcall	.-2846   	; 0x366 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e84:	ce 01       	movw	r24, r28
     e86:	60 91 47 01 	lds	r22, 0x0147
     e8a:	7b de       	rcall	.-778    	; 0xb82 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <printf>:
     e92:	a0 e0       	ldi	r26, 0x00	; 0
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ee e4       	ldi	r30, 0x4E	; 78
     e98:	f7 e0       	ldi	r31, 0x07	; 7
     e9a:	c0 c2       	rjmp	.+1408   	; 0x141c <__prologue_saves__+0x20>
     e9c:	fe 01       	movw	r30, r28
     e9e:	35 96       	adiw	r30, 0x05	; 5
     ea0:	61 91       	ld	r22, Z+
     ea2:	71 91       	ld	r23, Z+
     ea4:	80 91 4f 01 	lds	r24, 0x014F
     ea8:	90 91 50 01 	lds	r25, 0x0150
     eac:	af 01       	movw	r20, r30
     eae:	38 d0       	rcall	.+112    	; 0xf20 <vfprintf>
     eb0:	20 96       	adiw	r28, 0x00	; 0
     eb2:	e2 e0       	ldi	r30, 0x02	; 2
     eb4:	cf c2       	rjmp	.+1438   	; 0x1454 <__epilogue_restores__+0x20>

00000eb6 <puts>:
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	8c 01       	movw	r16, r24
     ec0:	e0 91 4f 01 	lds	r30, 0x014F
     ec4:	f0 91 50 01 	lds	r31, 0x0150
     ec8:	83 81       	ldd	r24, Z+3	; 0x03
     eca:	81 ff       	sbrs	r24, 1
     ecc:	21 c0       	rjmp	.+66     	; 0xf10 <puts+0x5a>
     ece:	c0 e0       	ldi	r28, 0x00	; 0
     ed0:	d0 e0       	ldi	r29, 0x00	; 0
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <puts+0x38>
     ed4:	e0 91 4f 01 	lds	r30, 0x014F
     ed8:	f0 91 50 01 	lds	r31, 0x0150
     edc:	20 85       	ldd	r18, Z+8	; 0x08
     ede:	31 85       	ldd	r19, Z+9	; 0x09
     ee0:	bf 01       	movw	r22, r30
     ee2:	f9 01       	movw	r30, r18
     ee4:	09 95       	icall
     ee6:	89 2b       	or	r24, r25
     ee8:	11 f0       	breq	.+4      	; 0xeee <puts+0x38>
     eea:	cf ef       	ldi	r28, 0xFF	; 255
     eec:	df ef       	ldi	r29, 0xFF	; 255
     eee:	f8 01       	movw	r30, r16
     ef0:	81 91       	ld	r24, Z+
     ef2:	8f 01       	movw	r16, r30
     ef4:	88 23       	and	r24, r24
     ef6:	71 f7       	brne	.-36     	; 0xed4 <puts+0x1e>
     ef8:	e0 91 4f 01 	lds	r30, 0x014F
     efc:	f0 91 50 01 	lds	r31, 0x0150
     f00:	20 85       	ldd	r18, Z+8	; 0x08
     f02:	31 85       	ldd	r19, Z+9	; 0x09
     f04:	8a e0       	ldi	r24, 0x0A	; 10
     f06:	bf 01       	movw	r22, r30
     f08:	f9 01       	movw	r30, r18
     f0a:	09 95       	icall
     f0c:	89 2b       	or	r24, r25
     f0e:	11 f0       	breq	.+4      	; 0xf14 <puts+0x5e>
     f10:	cf ef       	ldi	r28, 0xFF	; 255
     f12:	df ef       	ldi	r29, 0xFF	; 255
     f14:	ce 01       	movw	r24, r28
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <vfprintf>:
     f20:	ab e0       	ldi	r26, 0x0B	; 11
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e9       	ldi	r30, 0x95	; 149
     f26:	f7 e0       	ldi	r31, 0x07	; 7
     f28:	69 c2       	rjmp	.+1234   	; 0x13fc <__prologue_saves__>
     f2a:	3c 01       	movw	r6, r24
     f2c:	2b 01       	movw	r4, r22
     f2e:	5a 01       	movw	r10, r20
     f30:	fc 01       	movw	r30, r24
     f32:	17 82       	std	Z+7, r1	; 0x07
     f34:	16 82       	std	Z+6, r1	; 0x06
     f36:	83 81       	ldd	r24, Z+3	; 0x03
     f38:	81 fd       	sbrc	r24, 1
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <vfprintf+0x22>
     f3c:	6f ef       	ldi	r22, 0xFF	; 255
     f3e:	7f ef       	ldi	r23, 0xFF	; 255
     f40:	b9 c1       	rjmp	.+882    	; 0x12b4 <vfprintf+0x394>
     f42:	9a e0       	ldi	r25, 0x0A	; 10
     f44:	89 2e       	mov	r8, r25
     f46:	1e 01       	movw	r2, r28
     f48:	08 94       	sec
     f4a:	21 1c       	adc	r2, r1
     f4c:	31 1c       	adc	r3, r1
     f4e:	f3 01       	movw	r30, r6
     f50:	23 81       	ldd	r18, Z+3	; 0x03
     f52:	f2 01       	movw	r30, r4
     f54:	23 fd       	sbrc	r18, 3
     f56:	85 91       	lpm	r24, Z+
     f58:	23 ff       	sbrs	r18, 3
     f5a:	81 91       	ld	r24, Z+
     f5c:	2f 01       	movw	r4, r30
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <vfprintf+0x44>
     f62:	a5 c1       	rjmp	.+842    	; 0x12ae <vfprintf+0x38e>
     f64:	85 32       	cpi	r24, 0x25	; 37
     f66:	39 f4       	brne	.+14     	; 0xf76 <vfprintf+0x56>
     f68:	23 fd       	sbrc	r18, 3
     f6a:	85 91       	lpm	r24, Z+
     f6c:	23 ff       	sbrs	r18, 3
     f6e:	81 91       	ld	r24, Z+
     f70:	2f 01       	movw	r4, r30
     f72:	85 32       	cpi	r24, 0x25	; 37
     f74:	21 f4       	brne	.+8      	; 0xf7e <vfprintf+0x5e>
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b3 01       	movw	r22, r6
     f7a:	b6 d1       	rcall	.+876    	; 0x12e8 <fputc>
     f7c:	e8 cf       	rjmp	.-48     	; 0xf4e <vfprintf+0x2e>
     f7e:	98 2f       	mov	r25, r24
     f80:	ff 24       	eor	r15, r15
     f82:	ee 24       	eor	r14, r14
     f84:	99 24       	eor	r9, r9
     f86:	ff e1       	ldi	r31, 0x1F	; 31
     f88:	ff 15       	cp	r31, r15
     f8a:	d0 f0       	brcs	.+52     	; 0xfc0 <vfprintf+0xa0>
     f8c:	9b 32       	cpi	r25, 0x2B	; 43
     f8e:	69 f0       	breq	.+26     	; 0xfaa <vfprintf+0x8a>
     f90:	9c 32       	cpi	r25, 0x2C	; 44
     f92:	28 f4       	brcc	.+10     	; 0xf9e <vfprintf+0x7e>
     f94:	90 32       	cpi	r25, 0x20	; 32
     f96:	59 f0       	breq	.+22     	; 0xfae <vfprintf+0x8e>
     f98:	93 32       	cpi	r25, 0x23	; 35
     f9a:	91 f4       	brne	.+36     	; 0xfc0 <vfprintf+0xa0>
     f9c:	0e c0       	rjmp	.+28     	; 0xfba <vfprintf+0x9a>
     f9e:	9d 32       	cpi	r25, 0x2D	; 45
     fa0:	49 f0       	breq	.+18     	; 0xfb4 <vfprintf+0x94>
     fa2:	90 33       	cpi	r25, 0x30	; 48
     fa4:	69 f4       	brne	.+26     	; 0xfc0 <vfprintf+0xa0>
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	24 c0       	rjmp	.+72     	; 0xff2 <vfprintf+0xd2>
     faa:	52 e0       	ldi	r21, 0x02	; 2
     fac:	f5 2a       	or	r15, r21
     fae:	84 e0       	ldi	r24, 0x04	; 4
     fb0:	f8 2a       	or	r15, r24
     fb2:	28 c0       	rjmp	.+80     	; 0x1004 <vfprintf+0xe4>
     fb4:	98 e0       	ldi	r25, 0x08	; 8
     fb6:	f9 2a       	or	r15, r25
     fb8:	25 c0       	rjmp	.+74     	; 0x1004 <vfprintf+0xe4>
     fba:	e0 e1       	ldi	r30, 0x10	; 16
     fbc:	fe 2a       	or	r15, r30
     fbe:	22 c0       	rjmp	.+68     	; 0x1004 <vfprintf+0xe4>
     fc0:	f7 fc       	sbrc	r15, 7
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <vfprintf+0xf6>
     fc4:	89 2f       	mov	r24, r25
     fc6:	80 53       	subi	r24, 0x30	; 48
     fc8:	8a 30       	cpi	r24, 0x0A	; 10
     fca:	70 f4       	brcc	.+28     	; 0xfe8 <vfprintf+0xc8>
     fcc:	f6 fe       	sbrs	r15, 6
     fce:	05 c0       	rjmp	.+10     	; 0xfda <vfprintf+0xba>
     fd0:	98 9c       	mul	r9, r8
     fd2:	90 2c       	mov	r9, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	98 0e       	add	r9, r24
     fd8:	15 c0       	rjmp	.+42     	; 0x1004 <vfprintf+0xe4>
     fda:	e8 9c       	mul	r14, r8
     fdc:	e0 2c       	mov	r14, r0
     fde:	11 24       	eor	r1, r1
     fe0:	e8 0e       	add	r14, r24
     fe2:	f0 e2       	ldi	r31, 0x20	; 32
     fe4:	ff 2a       	or	r15, r31
     fe6:	0e c0       	rjmp	.+28     	; 0x1004 <vfprintf+0xe4>
     fe8:	9e 32       	cpi	r25, 0x2E	; 46
     fea:	29 f4       	brne	.+10     	; 0xff6 <vfprintf+0xd6>
     fec:	f6 fc       	sbrc	r15, 6
     fee:	5f c1       	rjmp	.+702    	; 0x12ae <vfprintf+0x38e>
     ff0:	40 e4       	ldi	r20, 0x40	; 64
     ff2:	f4 2a       	or	r15, r20
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <vfprintf+0xe4>
     ff6:	9c 36       	cpi	r25, 0x6C	; 108
     ff8:	19 f4       	brne	.+6      	; 0x1000 <vfprintf+0xe0>
     ffa:	50 e8       	ldi	r21, 0x80	; 128
     ffc:	f5 2a       	or	r15, r21
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <vfprintf+0xe4>
    1000:	98 36       	cpi	r25, 0x68	; 104
    1002:	49 f4       	brne	.+18     	; 0x1016 <vfprintf+0xf6>
    1004:	f2 01       	movw	r30, r4
    1006:	23 fd       	sbrc	r18, 3
    1008:	95 91       	lpm	r25, Z+
    100a:	23 ff       	sbrs	r18, 3
    100c:	91 91       	ld	r25, Z+
    100e:	2f 01       	movw	r4, r30
    1010:	99 23       	and	r25, r25
    1012:	09 f0       	breq	.+2      	; 0x1016 <vfprintf+0xf6>
    1014:	b8 cf       	rjmp	.-144    	; 0xf86 <vfprintf+0x66>
    1016:	89 2f       	mov	r24, r25
    1018:	85 54       	subi	r24, 0x45	; 69
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	18 f0       	brcs	.+6      	; 0x1024 <vfprintf+0x104>
    101e:	80 52       	subi	r24, 0x20	; 32
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	38 f4       	brcc	.+14     	; 0x1032 <vfprintf+0x112>
    1024:	44 e0       	ldi	r20, 0x04	; 4
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	a4 0e       	add	r10, r20
    102a:	b5 1e       	adc	r11, r21
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	59 83       	std	Y+1, r21	; 0x01
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <vfprintf+0x130>
    1032:	93 36       	cpi	r25, 0x63	; 99
    1034:	31 f0       	breq	.+12     	; 0x1042 <vfprintf+0x122>
    1036:	93 37       	cpi	r25, 0x73	; 115
    1038:	79 f0       	breq	.+30     	; 0x1058 <vfprintf+0x138>
    103a:	93 35       	cpi	r25, 0x53	; 83
    103c:	09 f0       	breq	.+2      	; 0x1040 <vfprintf+0x120>
    103e:	52 c0       	rjmp	.+164    	; 0x10e4 <vfprintf+0x1c4>
    1040:	1f c0       	rjmp	.+62     	; 0x1080 <vfprintf+0x160>
    1042:	f5 01       	movw	r30, r10
    1044:	80 81       	ld	r24, Z
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	42 e0       	ldi	r20, 0x02	; 2
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	a4 0e       	add	r10, r20
    104e:	b5 1e       	adc	r11, r21
    1050:	61 01       	movw	r12, r2
    1052:	01 e0       	ldi	r16, 0x01	; 1
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	11 c0       	rjmp	.+34     	; 0x107a <vfprintf+0x15a>
    1058:	f5 01       	movw	r30, r10
    105a:	c0 80       	ld	r12, Z
    105c:	d1 80       	ldd	r13, Z+1	; 0x01
    105e:	f6 fc       	sbrc	r15, 6
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <vfprintf+0x148>
    1062:	6f ef       	ldi	r22, 0xFF	; 255
    1064:	7f ef       	ldi	r23, 0xFF	; 255
    1066:	02 c0       	rjmp	.+4      	; 0x106c <vfprintf+0x14c>
    1068:	69 2d       	mov	r22, r9
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	42 e0       	ldi	r20, 0x02	; 2
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	a4 0e       	add	r10, r20
    1072:	b5 1e       	adc	r11, r21
    1074:	c6 01       	movw	r24, r12
    1076:	2d d1       	rcall	.+602    	; 0x12d2 <strnlen>
    1078:	8c 01       	movw	r16, r24
    107a:	5f e7       	ldi	r21, 0x7F	; 127
    107c:	f5 22       	and	r15, r21
    107e:	13 c0       	rjmp	.+38     	; 0x10a6 <vfprintf+0x186>
    1080:	f5 01       	movw	r30, r10
    1082:	c0 80       	ld	r12, Z
    1084:	d1 80       	ldd	r13, Z+1	; 0x01
    1086:	f6 fc       	sbrc	r15, 6
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <vfprintf+0x170>
    108a:	6f ef       	ldi	r22, 0xFF	; 255
    108c:	7f ef       	ldi	r23, 0xFF	; 255
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <vfprintf+0x174>
    1090:	69 2d       	mov	r22, r9
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	42 e0       	ldi	r20, 0x02	; 2
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	a4 0e       	add	r10, r20
    109a:	b5 1e       	adc	r11, r21
    109c:	c6 01       	movw	r24, r12
    109e:	0e d1       	rcall	.+540    	; 0x12bc <strnlen_P>
    10a0:	8c 01       	movw	r16, r24
    10a2:	50 e8       	ldi	r21, 0x80	; 128
    10a4:	f5 2a       	or	r15, r21
    10a6:	f3 fe       	sbrs	r15, 3
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <vfprintf+0x196>
    10aa:	18 c0       	rjmp	.+48     	; 0x10dc <vfprintf+0x1bc>
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b3 01       	movw	r22, r6
    10b2:	1a d1       	rcall	.+564    	; 0x12e8 <fputc>
    10b4:	ea 94       	dec	r14
    10b6:	8e 2d       	mov	r24, r14
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	08 17       	cp	r16, r24
    10bc:	19 07       	cpc	r17, r25
    10be:	b0 f3       	brcs	.-20     	; 0x10ac <vfprintf+0x18c>
    10c0:	0d c0       	rjmp	.+26     	; 0x10dc <vfprintf+0x1bc>
    10c2:	f6 01       	movw	r30, r12
    10c4:	f7 fc       	sbrc	r15, 7
    10c6:	85 91       	lpm	r24, Z+
    10c8:	f7 fe       	sbrs	r15, 7
    10ca:	81 91       	ld	r24, Z+
    10cc:	6f 01       	movw	r12, r30
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	b3 01       	movw	r22, r6
    10d2:	0a d1       	rcall	.+532    	; 0x12e8 <fputc>
    10d4:	e1 10       	cpse	r14, r1
    10d6:	ea 94       	dec	r14
    10d8:	01 50       	subi	r16, 0x01	; 1
    10da:	10 40       	sbci	r17, 0x00	; 0
    10dc:	01 15       	cp	r16, r1
    10de:	11 05       	cpc	r17, r1
    10e0:	81 f7       	brne	.-32     	; 0x10c2 <vfprintf+0x1a2>
    10e2:	e2 c0       	rjmp	.+452    	; 0x12a8 <vfprintf+0x388>
    10e4:	94 36       	cpi	r25, 0x64	; 100
    10e6:	11 f0       	breq	.+4      	; 0x10ec <vfprintf+0x1cc>
    10e8:	99 36       	cpi	r25, 0x69	; 105
    10ea:	61 f5       	brne	.+88     	; 0x1144 <vfprintf+0x224>
    10ec:	f7 fe       	sbrs	r15, 7
    10ee:	08 c0       	rjmp	.+16     	; 0x1100 <vfprintf+0x1e0>
    10f0:	f5 01       	movw	r30, r10
    10f2:	20 81       	ld	r18, Z
    10f4:	31 81       	ldd	r19, Z+1	; 0x01
    10f6:	42 81       	ldd	r20, Z+2	; 0x02
    10f8:	53 81       	ldd	r21, Z+3	; 0x03
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0a c0       	rjmp	.+20     	; 0x1114 <vfprintf+0x1f4>
    1100:	f5 01       	movw	r30, r10
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	9c 01       	movw	r18, r24
    1108:	44 27       	eor	r20, r20
    110a:	37 fd       	sbrc	r19, 7
    110c:	40 95       	com	r20
    110e:	54 2f       	mov	r21, r20
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a8 0e       	add	r10, r24
    1116:	b9 1e       	adc	r11, r25
    1118:	9f e6       	ldi	r25, 0x6F	; 111
    111a:	f9 22       	and	r15, r25
    111c:	57 ff       	sbrs	r21, 7
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <vfprintf+0x212>
    1120:	50 95       	com	r21
    1122:	40 95       	com	r20
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	4f 4f       	sbci	r20, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	e0 e8       	ldi	r30, 0x80	; 128
    1130:	fe 2a       	or	r15, r30
    1132:	ca 01       	movw	r24, r20
    1134:	b9 01       	movw	r22, r18
    1136:	a1 01       	movw	r20, r2
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	01 d1       	rcall	.+514    	; 0x1340 <__ultoa_invert>
    113e:	d8 2e       	mov	r13, r24
    1140:	d2 18       	sub	r13, r2
    1142:	3f c0       	rjmp	.+126    	; 0x11c2 <vfprintf+0x2a2>
    1144:	95 37       	cpi	r25, 0x75	; 117
    1146:	29 f4       	brne	.+10     	; 0x1152 <vfprintf+0x232>
    1148:	1f 2d       	mov	r17, r15
    114a:	1f 7e       	andi	r17, 0xEF	; 239
    114c:	2a e0       	ldi	r18, 0x0A	; 10
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	1d c0       	rjmp	.+58     	; 0x118c <vfprintf+0x26c>
    1152:	1f 2d       	mov	r17, r15
    1154:	19 7f       	andi	r17, 0xF9	; 249
    1156:	9f 36       	cpi	r25, 0x6F	; 111
    1158:	61 f0       	breq	.+24     	; 0x1172 <vfprintf+0x252>
    115a:	90 37       	cpi	r25, 0x70	; 112
    115c:	20 f4       	brcc	.+8      	; 0x1166 <vfprintf+0x246>
    115e:	98 35       	cpi	r25, 0x58	; 88
    1160:	09 f0       	breq	.+2      	; 0x1164 <vfprintf+0x244>
    1162:	a5 c0       	rjmp	.+330    	; 0x12ae <vfprintf+0x38e>
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <vfprintf+0x264>
    1166:	90 37       	cpi	r25, 0x70	; 112
    1168:	39 f0       	breq	.+14     	; 0x1178 <vfprintf+0x258>
    116a:	98 37       	cpi	r25, 0x78	; 120
    116c:	09 f0       	breq	.+2      	; 0x1170 <vfprintf+0x250>
    116e:	9f c0       	rjmp	.+318    	; 0x12ae <vfprintf+0x38e>
    1170:	04 c0       	rjmp	.+8      	; 0x117a <vfprintf+0x25a>
    1172:	28 e0       	ldi	r18, 0x08	; 8
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	0a c0       	rjmp	.+20     	; 0x118c <vfprintf+0x26c>
    1178:	10 61       	ori	r17, 0x10	; 16
    117a:	14 fd       	sbrc	r17, 4
    117c:	14 60       	ori	r17, 0x04	; 4
    117e:	20 e1       	ldi	r18, 0x10	; 16
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	04 c0       	rjmp	.+8      	; 0x118c <vfprintf+0x26c>
    1184:	14 fd       	sbrc	r17, 4
    1186:	16 60       	ori	r17, 0x06	; 6
    1188:	20 e1       	ldi	r18, 0x10	; 16
    118a:	32 e0       	ldi	r19, 0x02	; 2
    118c:	17 ff       	sbrs	r17, 7
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <vfprintf+0x280>
    1190:	f5 01       	movw	r30, r10
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	44 e0       	ldi	r20, 0x04	; 4
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <vfprintf+0x290>
    11a0:	f5 01       	movw	r30, r10
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	bc 01       	movw	r22, r24
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	42 e0       	ldi	r20, 0x02	; 2
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	a4 0e       	add	r10, r20
    11b2:	b5 1e       	adc	r11, r21
    11b4:	a1 01       	movw	r20, r2
    11b6:	c4 d0       	rcall	.+392    	; 0x1340 <__ultoa_invert>
    11b8:	d8 2e       	mov	r13, r24
    11ba:	d2 18       	sub	r13, r2
    11bc:	8f e7       	ldi	r24, 0x7F	; 127
    11be:	f8 2e       	mov	r15, r24
    11c0:	f1 22       	and	r15, r17
    11c2:	f6 fe       	sbrs	r15, 6
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <vfprintf+0x2bc>
    11c6:	5e ef       	ldi	r21, 0xFE	; 254
    11c8:	f5 22       	and	r15, r21
    11ca:	d9 14       	cp	r13, r9
    11cc:	38 f4       	brcc	.+14     	; 0x11dc <vfprintf+0x2bc>
    11ce:	f4 fe       	sbrs	r15, 4
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <vfprintf+0x2c0>
    11d2:	f2 fc       	sbrc	r15, 2
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <vfprintf+0x2c0>
    11d6:	8f ee       	ldi	r24, 0xEF	; 239
    11d8:	f8 22       	and	r15, r24
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x2c0>
    11dc:	1d 2d       	mov	r17, r13
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <vfprintf+0x2c2>
    11e0:	19 2d       	mov	r17, r9
    11e2:	f4 fe       	sbrs	r15, 4
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <vfprintf+0x2e0>
    11e6:	fe 01       	movw	r30, r28
    11e8:	ed 0d       	add	r30, r13
    11ea:	f1 1d       	adc	r31, r1
    11ec:	80 81       	ld	r24, Z
    11ee:	80 33       	cpi	r24, 0x30	; 48
    11f0:	19 f4       	brne	.+6      	; 0x11f8 <vfprintf+0x2d8>
    11f2:	99 ee       	ldi	r25, 0xE9	; 233
    11f4:	f9 22       	and	r15, r25
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <vfprintf+0x2e8>
    11f8:	1f 5f       	subi	r17, 0xFF	; 255
    11fa:	f2 fe       	sbrs	r15, 2
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <vfprintf+0x2e8>
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <vfprintf+0x2e6>
    1200:	8f 2d       	mov	r24, r15
    1202:	86 78       	andi	r24, 0x86	; 134
    1204:	09 f0       	breq	.+2      	; 0x1208 <vfprintf+0x2e8>
    1206:	1f 5f       	subi	r17, 0xFF	; 255
    1208:	0f 2d       	mov	r16, r15
    120a:	f3 fc       	sbrc	r15, 3
    120c:	13 c0       	rjmp	.+38     	; 0x1234 <vfprintf+0x314>
    120e:	f0 fe       	sbrs	r15, 0
    1210:	0e c0       	rjmp	.+28     	; 0x122e <vfprintf+0x30e>
    1212:	1e 15       	cp	r17, r14
    1214:	10 f0       	brcs	.+4      	; 0x121a <vfprintf+0x2fa>
    1216:	9d 2c       	mov	r9, r13
    1218:	0a c0       	rjmp	.+20     	; 0x122e <vfprintf+0x30e>
    121a:	9d 2c       	mov	r9, r13
    121c:	9e 0c       	add	r9, r14
    121e:	91 1a       	sub	r9, r17
    1220:	1e 2d       	mov	r17, r14
    1222:	05 c0       	rjmp	.+10     	; 0x122e <vfprintf+0x30e>
    1224:	80 e2       	ldi	r24, 0x20	; 32
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	b3 01       	movw	r22, r6
    122a:	5e d0       	rcall	.+188    	; 0x12e8 <fputc>
    122c:	1f 5f       	subi	r17, 0xFF	; 255
    122e:	1e 15       	cp	r17, r14
    1230:	c8 f3       	brcs	.-14     	; 0x1224 <vfprintf+0x304>
    1232:	04 c0       	rjmp	.+8      	; 0x123c <vfprintf+0x31c>
    1234:	1e 15       	cp	r17, r14
    1236:	10 f4       	brcc	.+4      	; 0x123c <vfprintf+0x31c>
    1238:	e1 1a       	sub	r14, r17
    123a:	01 c0       	rjmp	.+2      	; 0x123e <vfprintf+0x31e>
    123c:	ee 24       	eor	r14, r14
    123e:	04 ff       	sbrs	r16, 4
    1240:	0e c0       	rjmp	.+28     	; 0x125e <vfprintf+0x33e>
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	b3 01       	movw	r22, r6
    1248:	4f d0       	rcall	.+158    	; 0x12e8 <fputc>
    124a:	02 ff       	sbrs	r16, 2
    124c:	1b c0       	rjmp	.+54     	; 0x1284 <vfprintf+0x364>
    124e:	01 fd       	sbrc	r16, 1
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <vfprintf+0x338>
    1252:	88 e7       	ldi	r24, 0x78	; 120
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e c0       	rjmp	.+28     	; 0x1274 <vfprintf+0x354>
    1258:	88 e5       	ldi	r24, 0x58	; 88
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0b c0       	rjmp	.+22     	; 0x1274 <vfprintf+0x354>
    125e:	80 2f       	mov	r24, r16
    1260:	86 78       	andi	r24, 0x86	; 134
    1262:	81 f0       	breq	.+32     	; 0x1284 <vfprintf+0x364>
    1264:	01 ff       	sbrs	r16, 1
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x34c>
    1268:	8b e2       	ldi	r24, 0x2B	; 43
    126a:	01 c0       	rjmp	.+2      	; 0x126e <vfprintf+0x34e>
    126c:	80 e2       	ldi	r24, 0x20	; 32
    126e:	f7 fc       	sbrc	r15, 7
    1270:	8d e2       	ldi	r24, 0x2D	; 45
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	b3 01       	movw	r22, r6
    1276:	38 d0       	rcall	.+112    	; 0x12e8 <fputc>
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <vfprintf+0x364>
    127a:	80 e3       	ldi	r24, 0x30	; 48
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	b3 01       	movw	r22, r6
    1280:	33 d0       	rcall	.+102    	; 0x12e8 <fputc>
    1282:	9a 94       	dec	r9
    1284:	d9 14       	cp	r13, r9
    1286:	c8 f3       	brcs	.-14     	; 0x127a <vfprintf+0x35a>
    1288:	da 94       	dec	r13
    128a:	f1 01       	movw	r30, r2
    128c:	ed 0d       	add	r30, r13
    128e:	f1 1d       	adc	r31, r1
    1290:	80 81       	ld	r24, Z
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	b3 01       	movw	r22, r6
    1296:	28 d0       	rcall	.+80     	; 0x12e8 <fputc>
    1298:	dd 20       	and	r13, r13
    129a:	b1 f7       	brne	.-20     	; 0x1288 <vfprintf+0x368>
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <vfprintf+0x388>
    129e:	80 e2       	ldi	r24, 0x20	; 32
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	b3 01       	movw	r22, r6
    12a4:	21 d0       	rcall	.+66     	; 0x12e8 <fputc>
    12a6:	ea 94       	dec	r14
    12a8:	ee 20       	and	r14, r14
    12aa:	c9 f7       	brne	.-14     	; 0x129e <vfprintf+0x37e>
    12ac:	50 ce       	rjmp	.-864    	; 0xf4e <vfprintf+0x2e>
    12ae:	f3 01       	movw	r30, r6
    12b0:	66 81       	ldd	r22, Z+6	; 0x06
    12b2:	77 81       	ldd	r23, Z+7	; 0x07
    12b4:	cb 01       	movw	r24, r22
    12b6:	2b 96       	adiw	r28, 0x0b	; 11
    12b8:	e2 e1       	ldi	r30, 0x12	; 18
    12ba:	bc c0       	rjmp	.+376    	; 0x1434 <__epilogue_restores__>

000012bc <strnlen_P>:
    12bc:	fc 01       	movw	r30, r24
    12be:	05 90       	lpm	r0, Z+
    12c0:	61 50       	subi	r22, 0x01	; 1
    12c2:	70 40       	sbci	r23, 0x00	; 0
    12c4:	01 10       	cpse	r0, r1
    12c6:	d8 f7       	brcc	.-10     	; 0x12be <strnlen_P+0x2>
    12c8:	80 95       	com	r24
    12ca:	90 95       	com	r25
    12cc:	8e 0f       	add	r24, r30
    12ce:	9f 1f       	adc	r25, r31
    12d0:	08 95       	ret

000012d2 <strnlen>:
    12d2:	fc 01       	movw	r30, r24
    12d4:	61 50       	subi	r22, 0x01	; 1
    12d6:	70 40       	sbci	r23, 0x00	; 0
    12d8:	01 90       	ld	r0, Z+
    12da:	01 10       	cpse	r0, r1
    12dc:	d8 f7       	brcc	.-10     	; 0x12d4 <strnlen+0x2>
    12de:	80 95       	com	r24
    12e0:	90 95       	com	r25
    12e2:	8e 0f       	add	r24, r30
    12e4:	9f 1f       	adc	r25, r31
    12e6:	08 95       	ret

000012e8 <fputc>:
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	8c 01       	movw	r16, r24
    12f2:	eb 01       	movw	r28, r22
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	81 ff       	sbrs	r24, 1
    12f8:	1b c0       	rjmp	.+54     	; 0x1330 <fputc+0x48>
    12fa:	82 ff       	sbrs	r24, 2
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <fputc+0x30>
    12fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1300:	3f 81       	ldd	r19, Y+7	; 0x07
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	64 f4       	brge	.+24     	; 0x1324 <fputc+0x3c>
    130c:	e8 81       	ld	r30, Y
    130e:	f9 81       	ldd	r31, Y+1	; 0x01
    1310:	01 93       	st	Z+, r16
    1312:	f9 83       	std	Y+1, r31	; 0x01
    1314:	e8 83       	st	Y, r30
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <fputc+0x3c>
    1318:	e8 85       	ldd	r30, Y+8	; 0x08
    131a:	f9 85       	ldd	r31, Y+9	; 0x09
    131c:	80 2f       	mov	r24, r16
    131e:	09 95       	icall
    1320:	89 2b       	or	r24, r25
    1322:	31 f4       	brne	.+12     	; 0x1330 <fputc+0x48>
    1324:	8e 81       	ldd	r24, Y+6	; 0x06
    1326:	9f 81       	ldd	r25, Y+7	; 0x07
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	9f 83       	std	Y+7, r25	; 0x07
    132c:	8e 83       	std	Y+6, r24	; 0x06
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <fputc+0x4c>
    1330:	0f ef       	ldi	r16, 0xFF	; 255
    1332:	1f ef       	ldi	r17, 0xFF	; 255
    1334:	c8 01       	movw	r24, r16
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	08 95       	ret

00001340 <__ultoa_invert>:
    1340:	fa 01       	movw	r30, r20
    1342:	aa 27       	eor	r26, r26
    1344:	28 30       	cpi	r18, 0x08	; 8
    1346:	51 f1       	breq	.+84     	; 0x139c <__ultoa_invert+0x5c>
    1348:	20 31       	cpi	r18, 0x10	; 16
    134a:	81 f1       	breq	.+96     	; 0x13ac <__ultoa_invert+0x6c>
    134c:	e8 94       	clt
    134e:	6f 93       	push	r22
    1350:	6e 7f       	andi	r22, 0xFE	; 254
    1352:	6e 5f       	subi	r22, 0xFE	; 254
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	8f 4f       	sbci	r24, 0xFF	; 255
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	af 4f       	sbci	r26, 0xFF	; 255
    135c:	b1 e0       	ldi	r27, 0x01	; 1
    135e:	3e d0       	rcall	.+124    	; 0x13dc <__ultoa_invert+0x9c>
    1360:	b4 e0       	ldi	r27, 0x04	; 4
    1362:	3c d0       	rcall	.+120    	; 0x13dc <__ultoa_invert+0x9c>
    1364:	67 0f       	add	r22, r23
    1366:	78 1f       	adc	r23, r24
    1368:	89 1f       	adc	r24, r25
    136a:	9a 1f       	adc	r25, r26
    136c:	a1 1d       	adc	r26, r1
    136e:	68 0f       	add	r22, r24
    1370:	79 1f       	adc	r23, r25
    1372:	8a 1f       	adc	r24, r26
    1374:	91 1d       	adc	r25, r1
    1376:	a1 1d       	adc	r26, r1
    1378:	6a 0f       	add	r22, r26
    137a:	71 1d       	adc	r23, r1
    137c:	81 1d       	adc	r24, r1
    137e:	91 1d       	adc	r25, r1
    1380:	a1 1d       	adc	r26, r1
    1382:	20 d0       	rcall	.+64     	; 0x13c4 <__ultoa_invert+0x84>
    1384:	09 f4       	brne	.+2      	; 0x1388 <__ultoa_invert+0x48>
    1386:	68 94       	set
    1388:	3f 91       	pop	r19
    138a:	2a e0       	ldi	r18, 0x0A	; 10
    138c:	26 9f       	mul	r18, r22
    138e:	11 24       	eor	r1, r1
    1390:	30 19       	sub	r19, r0
    1392:	30 5d       	subi	r19, 0xD0	; 208
    1394:	31 93       	st	Z+, r19
    1396:	de f6       	brtc	.-74     	; 0x134e <__ultoa_invert+0xe>
    1398:	cf 01       	movw	r24, r30
    139a:	08 95       	ret
    139c:	46 2f       	mov	r20, r22
    139e:	47 70       	andi	r20, 0x07	; 7
    13a0:	40 5d       	subi	r20, 0xD0	; 208
    13a2:	41 93       	st	Z+, r20
    13a4:	b3 e0       	ldi	r27, 0x03	; 3
    13a6:	0f d0       	rcall	.+30     	; 0x13c6 <__ultoa_invert+0x86>
    13a8:	c9 f7       	brne	.-14     	; 0x139c <__ultoa_invert+0x5c>
    13aa:	f6 cf       	rjmp	.-20     	; 0x1398 <__ultoa_invert+0x58>
    13ac:	46 2f       	mov	r20, r22
    13ae:	4f 70       	andi	r20, 0x0F	; 15
    13b0:	40 5d       	subi	r20, 0xD0	; 208
    13b2:	4a 33       	cpi	r20, 0x3A	; 58
    13b4:	18 f0       	brcs	.+6      	; 0x13bc <__ultoa_invert+0x7c>
    13b6:	49 5d       	subi	r20, 0xD9	; 217
    13b8:	31 fd       	sbrc	r19, 1
    13ba:	40 52       	subi	r20, 0x20	; 32
    13bc:	41 93       	st	Z+, r20
    13be:	02 d0       	rcall	.+4      	; 0x13c4 <__ultoa_invert+0x84>
    13c0:	a9 f7       	brne	.-22     	; 0x13ac <__ultoa_invert+0x6c>
    13c2:	ea cf       	rjmp	.-44     	; 0x1398 <__ultoa_invert+0x58>
    13c4:	b4 e0       	ldi	r27, 0x04	; 4
    13c6:	a6 95       	lsr	r26
    13c8:	97 95       	ror	r25
    13ca:	87 95       	ror	r24
    13cc:	77 95       	ror	r23
    13ce:	67 95       	ror	r22
    13d0:	ba 95       	dec	r27
    13d2:	c9 f7       	brne	.-14     	; 0x13c6 <__ultoa_invert+0x86>
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	61 05       	cpc	r22, r1
    13d8:	71 05       	cpc	r23, r1
    13da:	08 95       	ret
    13dc:	9b 01       	movw	r18, r22
    13de:	ac 01       	movw	r20, r24
    13e0:	0a 2e       	mov	r0, r26
    13e2:	06 94       	lsr	r0
    13e4:	57 95       	ror	r21
    13e6:	47 95       	ror	r20
    13e8:	37 95       	ror	r19
    13ea:	27 95       	ror	r18
    13ec:	ba 95       	dec	r27
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__ultoa_invert+0xa2>
    13f0:	62 0f       	add	r22, r18
    13f2:	73 1f       	adc	r23, r19
    13f4:	84 1f       	adc	r24, r20
    13f6:	95 1f       	adc	r25, r21
    13f8:	a0 1d       	adc	r26, r0
    13fa:	08 95       	ret

000013fc <__prologue_saves__>:
    13fc:	2f 92       	push	r2
    13fe:	3f 92       	push	r3
    1400:	4f 92       	push	r4
    1402:	5f 92       	push	r5
    1404:	6f 92       	push	r6
    1406:	7f 92       	push	r7
    1408:	8f 92       	push	r8
    140a:	9f 92       	push	r9
    140c:	af 92       	push	r10
    140e:	bf 92       	push	r11
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	ca 1b       	sub	r28, r26
    1426:	db 0b       	sbc	r29, r27
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	09 94       	ijmp

00001434 <__epilogue_restores__>:
    1434:	2a 88       	ldd	r2, Y+18	; 0x12
    1436:	39 88       	ldd	r3, Y+17	; 0x11
    1438:	48 88       	ldd	r4, Y+16	; 0x10
    143a:	5f 84       	ldd	r5, Y+15	; 0x0f
    143c:	6e 84       	ldd	r6, Y+14	; 0x0e
    143e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1440:	8c 84       	ldd	r8, Y+12	; 0x0c
    1442:	9b 84       	ldd	r9, Y+11	; 0x0b
    1444:	aa 84       	ldd	r10, Y+10	; 0x0a
    1446:	b9 84       	ldd	r11, Y+9	; 0x09
    1448:	c8 84       	ldd	r12, Y+8	; 0x08
    144a:	df 80       	ldd	r13, Y+7	; 0x07
    144c:	ee 80       	ldd	r14, Y+6	; 0x06
    144e:	fd 80       	ldd	r15, Y+5	; 0x05
    1450:	0c 81       	ldd	r16, Y+4	; 0x04
    1452:	1b 81       	ldd	r17, Y+3	; 0x03
    1454:	aa 81       	ldd	r26, Y+2	; 0x02
    1456:	b9 81       	ldd	r27, Y+1	; 0x01
    1458:	ce 0f       	add	r28, r30
    145a:	d1 1d       	adc	r29, r1
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	ed 01       	movw	r28, r26
    1468:	08 95       	ret

0000146a <_exit>:
    146a:	f8 94       	cli

0000146c <__stop_program>:
    146c:	ff cf       	rjmp	.-2      	; 0x146c <__stop_program>
